{
	"audio": {
		"title": "Audio",
		"subtitle": "Accessibility",
		"letter": "A",
		"intro": {
			"p": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius incidunt, temporibus iure cupiditate hic modi voluptatem officia atque maiores, obcaecati eum aspernatur rem, consequuntur quos. In et, illum nisi voluptas facere cumque inventore, sed repellendus aliquid consectetur amet ex culpa vel ab! Magni nemo, eos quis accusantium labore mollitia placeat!",
			"img": {
				"src": "assets/img/dummy.png",
				"alt": "alt"
			}
		},
		"sections": [
			{
				"title": "Hiding Elements",
				"paragraphs": [
					{
						"li": "Most SR Obey <code class='language-css'>display:none</code> and <code class='language-css'>visibility:hidden</code> by not reading the text "
					},
					{
						"li": "The best way to hide text for users with vision but still let it be read out by screen readers is in css like this:",
						"pre": ".visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}",
						"preLang": "css"
					}
				],
				"subs": [
					{
						"title": "Section 1.1.",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					},
					{
						"title": "New Sub",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					}
				]
			},
			{
				"title": "Section2",
				"paragraphs": [
					{
						"p": "dolor sit"
					},
					{
						"img": "only img"
					}
				],
				"subs": [
					{
						"title": "test2"
					}
				]
			}
		]
	},
	"cognitive": {
		"title": "Cognitive",
		"subtitle": "Accessibility",
		"letter": "C",
		"intro": {
			"p": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius incidunt, temporibus iure cupiditate hic modi voluptatem officia atque maiores, obcaecati eum aspernatur rem, consequuntur quos. In et, illum nisi voluptas facere cumque inventore, sed repellendus aliquid consectetur amet ex culpa vel ab! Magni nemo, eos quis accusantium labore mollitia placeat!",
			"img": {
				"src": "assets/img/dummy.png",
				"alt": "alt"
			}
		},
		"sections": [
			{
				"title": "Hiding Elements",
				"paragraphs": [
					{
						"li": "Most SR Obey <code class='language-css'>display:none</code> and <code class='language-css'>visibility:hidden</code> by not reading the text "
					},
					{
						"li": "The best way to hide text for users with vision but still let it be read out by screen readers is in css like this:",
						"pre": ".visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}",
						"preLang": "css"
					}
				],
				"subs": [
					{
						"title": "Section 1.1.",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					},
					{
						"title": "New Sub",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					}
				]
			},
			{
				"title": "Section2",
				"paragraphs": [
					{
						"p": "dolor sit"
					},
					{
						"img": "only img"
					}
				],
				"subs": [
					{
						"title": "test2"
					}
				]
			}
		]
	},
	"physical": {
		"title": "Physical",
		"subtitle": "Accessibility",
		"letter": "P",
		"intro": {
			"p": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius incidunt, temporibus iure cupiditate hic modi voluptatem officia atque maiores, obcaecati eum aspernatur rem, consequuntur quos. In et, illum nisi voluptas facere cumque inventore, sed repellendus aliquid consectetur amet ex culpa vel ab! Magni nemo, eos quis accusantium labore mollitia placeat!",
			"img": {
				"src": "assets/img/dummy.png",
				"alt": "alt"
			}
		},
		"sections": [
			{
				"title": "Hiding Elements",
				"paragraphs": [
					{
						"li": "Most SR Obey <code class='language-css'>display:none</code> and <code class='language-css'>visibility:hidden</code> by not reading the text "
					},
					{
						"li": "The best way to hide text for users with vision but still let it be read out by screen readers is in css like this:",
						"pre": ".visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}",
						"preLang": "css"
					}
				],
				"subs": [
					{
						"title": "Section 1.1.",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					},
					{
						"title": "New Sub",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					}
				]
			},
			{
				"title": "Section2",
				"paragraphs": [
					{
						"p": "dolor sit"
					},
					{
						"img": "only img"
					}
				],
				"subs": [
					{
						"title": "test2"
					}
				]
			}
		]
	},
	"shared": {
		"toc": {
			"title": "Table of contents for",
			"V": 1,
			"A": 2,
			"P": 3,
			"C": 4
		},
		"nav": {
			"title": "Main menu",
			"selected": "current:",
			"options": [
				{
					"url": "visual.html",
					"title": "V",
					"description": "visual",
					"sr": "accessibility"
				},
				{
					"url": "vision-color.html",
					"title": "L",
					"description": "low vision + color",
					"sr": "accessibility"
				},
				{
					"url": "physical-audio.html",
					"title": "P",
					"description": "physical + audio",
					"sr": "accessibility"
				},
				{
					"url": "cognitive.html",
					"title": "C",
					"description": "cognitive",
					"sr": "accessibility"
				}
			]
		},
		"skipLinks": {
			"toContent": "Content",
			"toToc": "Table of Content",
			"toNav": "Navigation"
		},
		"sections": {
			"output": "Visual output",
			"audio": "Screen reader",
			"example": "Code example",
			"skip": "skip code example to next item",
			"warning": "> Note: ⇥ means that next element is only read when user press 'next item' button on his screen reader.<br> > Note: audio output when pressing on listen is not always accurate. But the text above these notes is."
		},
		"home": {
			"letters": [
				"A",
				"c",
				"c",
				"e",
				"s",
				"s",
				"i",
				"b",
				"i",
				"l",
				"i",
				"t",
				"y",
				"i",
				"s"
			],
			"title": "Accessibility",
			"subtitle": "for everyone"
		}
	},
	"visual": {
		"title": "Visual",
		"subtitle": "Accessibility",
		"letter": "V",
		"intro": {
			"p": "Speaking of web-accessibility, the visually impaired have the most painpoints. <a href=\"http://www.euroblind.org/resources/information/\">According to the EBU</a> more than 4% of the european population is blind or partially sighted. They use screen reader. A screen reader is a tool that reads content aloud. There are different types of screen readers, the most popular Screen Readers are JAWS and Zoom Text:",
			"img": {
				"src": "assets/img/sr-stats.png",
				"alt": "Chart of primary screen reader usage showing decreases in JAWS, NVDA, VoiceOver, SA and significant increases in ZoomText and Window-Eyes.",
				"caption": "Chart based on Data from <a href=\"http://webaim.org/projects/screenreadersurvey6/#primary\">webaim.org</a> a textual description can be found there."
			},
			"ul": [
				"All concepts introduced on this page were tested with VoiceOver and JAWS in June 2016.",
				"In all outputs under the examples, the headings where replaced by strong tags in order to not confuse screen reader users browsing this page."
			]
		},
		"sections": [
			{
				"title": "Basic Facts",
				"paragraphs": [
					{
						"li": "Screen reader can read text, and interpret special attributes written in HTML, most modern screen reader can also list common items as all headers, links, forms and tables."
					},
					{
						"li": "The usual painpoints are a bad page strukture, images, svg, graphs, videos, forms, tables, repetitive elements, visual features, popups."
					},
					{
						"li": "Screen readers have <a href=\"http://webaim.org/projects/screenreadersurvey4/#javascript\">no problems using javascript</a>."
					}
				]
			},
			{
				"title": "Hiding Elements",
				"paragraphs": [
					{
						"li": "Almost all screen reader obey <code class='language-css'>display:none</code> and <code class='language-css'>visibility:hidden</code> by ignoring the element."
					},
					{
						"li": "To have elements visually hidden but still accessible for screen readers the <a href=\"https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements\">W3C suggests</a> this css method:",
						"pre": ".visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}",
						"preLang": "css"
					},
					{
						"li": "Of course you can also do the contrary. Hide text for screen readers but show it visually by using <code class='language-markup'>aria-hidden=\"true\"</code>. The support for aria-hidden is <a href=\"http://www.html5accessibility.com/tests/hidden2013.html\">brilliant</a>."
					},
					{
						"li": "This is how a screenreader would typically interpret the different hiding methods:",
						"example": {
							"pre": "I love\n <span style=\"display:none;\">bees</span>\n <span class=\"visuallyhidden\">cats</span>\n <span hidden>and</span>\n <span aria-hidden=\"true\">you</span>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "I love cats"
						}
					}
				]
			},
			{
				"title": "Structure",
				"paragraphs": [
					{
						"li": "The typical behaviour of screen reader is to read the page from top to bottom. So it is critical that all your element positioning follows the HTML flow. As all modern screen reader use and understand CSS and JavaScript it is important not to mess with that logical flow."
					},
					{
						"li": "The document outline should be respected. Read more on this in the <a href=\"#headings\">Headings section</a>. A tool to check your document outline is the <a href=\"https://gsnedders.html5.org/outliner/\">html5 outliner</a>."
					},
					{
						"li": "Use the <code>header</code> tag with <code>role=\"banner\"</code> for the heading of your website (often containing the logo and a searchbar). I.e. like this:",
						"example": {
							"pre": "<header role=\"banner\">\n  <img alt=\"Google\" style=\"height:70px\">\n  <div role=\"search\">\n    <input type=\"search\" aria-label=\"Search\">\n    <button type=\"submit\">Search</button>\n  </div>\n</header>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Banner, 2 items. -- Google image. -- Search, 2 items. -- search input. -- search button."
						}
					},
					{
						"li": "Any navigation should be contained in a <code>nav</code> tag with <code>role=\"navigation\"</code>. This way some screen reader will be able to list all the navigation elements on your page. Learn more on navigations in the <a href=\"#Navigation\">Navigation section</a>."
					},
					{
						"li": "The main content should be in a <code>main</code> tag with <code>role=\"main\"</code>. A page should always have main section. Some screen reader allow users to jump directly into the main section of a page and thus skipping the navigation or headings."
					},
					{
						"li": "The global footer should be in a <code>footer</code> tag with the <code>role=\"contentinfo\"</code> to differentiate it from other footers on the page."
					},
					{
						"li": "Any supplementary element (that do not fit in the main tag) belong in an <code>aside</code> tag with <code>role=\"complementary\"</code>."
					},
					{
						"li": "The searchbar (with its input, label, button, etc.) should be in a container (can be a form element) with <code>role=\"search\"</code>. Some screen reader allow users to jump directly to the search bar."
					},
					{
						"li": "To group content of a page you can divide it in sections with the <code>section</code> tag and the generic <code>role=\"region\"</code>. However, don’t overuse it as it adds text for the screen reader to read. On this page the different sections were groupes using this method, but not their subsections. Like this:",
						"example": {
							"pre": "<section role=\"region\" aria-labelledby=\"SomeTitle\">\n  <h2 id=\"SomeTitle\">\n    Structure\n  </h2>\n\n  [...]\n\n  <div>\n    <h3 id=\"SomeSubtitle\">\n      Subtitle of Structure\n    </h3>\n\n    [...]\n\n  </div>\n</section>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Region 'Structure', 4 items. -- Heading Level 2, Structure. -- content. -- Heading Level 3, Subtitle of Structure. -- content."
						}
					},
					{
						"li": "When structuring your element, the best practice is to use the <code>aria-labelledby</code> attribute and give it the <code>id</code> of the elements heading since all modern screen readers can list headings but not sections. If there is no descriptive heading, at least the <code>aria-label</code> attribute should be used. Let’s demonstrate the different behaviours:",
						"example": {
							"pre": "<section role=\"region\" aria-label=\"about\">\n  <h2 id=\"about\">About Sharks</h2>\n  [...]\n</section>\nOR\n<section role=\"region\" aria-label=\"Shark Fakts\">\n  [...]\n</section>\nOR\n<section role=\"region\">\n  [...]\n</section>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Region 'About Sharks' 2 items. -- Heading Level 2, About Sharks. -- content. | OR. -- Region 'Shark Fakts' 1 item. -- content. | OR. -- Region 1 item. -- content."
						}
					},
					{
						"li": "Use the right tags for the job:",
						"table": {
							"caption": "which tag is for what?",
							"heads": [
								"tag",
								"job",
								"learn more"
							],
							"rows": [
								[
									"ol",
									"ordered list",
									"<a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/ol\">MDN</a>"
								],
								[
									"ul",
									"unordered list",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\">MDN</a>"
								],
								[
									"dl",
									"definition list",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\">MDN</a>"
								],
								[
									"table",
									"tabular data",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\">MDN</a>"
								],
								[
									"blockquote",
									"quotes",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\">MDN</a>"
								],
								[
									"q",
									"inline quotes",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\">MDN</a>"
								],
								[
									"img",
									"images",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\">MDN</a>"
								],
								[
									"em",
									"emphasis (italic text)",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em\">MDN</a>"
								],
								[
									"strong",
									"bold/highlighted text",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\">MDN</a>"
								],
								[
									{
										"manyMoreTitle": "Few more",
										"manyMoreSpan": "3",
										"manyMoreUrl": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/",
										"manyMore": [
											"abbr",
											"address",
											"audio",
											"base",
											"button",
											"colgroup",
											"datalist",
											"del",
											"details",
											"figure",
											"i",
											"kbd",
											"map",
											"mark",
											"meter",
											"noscript",
											"output",
											"progress",
											"s",
											"sub",
											"sup",
											"track",
											"video"
										]
									}
								]
							]
						}
					}
				]
			},
			{
				"title": "Headings",
				"paragraphs": [
					{
						"li": "Beside giving a visual clue, screen reader can list all headings. A screen reader user will typically scan a pages headings and then jump imediately to that section. Therefor the logical flow of headings is more than important. Nest headings accordingly: h1 > h2 > h3 > ... without skipping a level."
					},
					{
						"li": "therefore it is also important to give all your page sections a specific heading with <code>aria-labelledby</code> <a href=\"#Structure-10\">as seen before under Structure</a>."
					},
					{
						"li": "Wen browsing over a heading, its level is read aloud:",
						"example": {
							"pre": "<h6>Example Heading</h6>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Heading Level 6, Example Heading."
						}
					},
					{
						"li": "The <code>role=\"heading\"</code> is not necessary if you use h tags. It might be used to declare another element than an h tag as a heading with <code>role=\"heading\" aria-level=\"7\"</code>. I.e. to get deeper than h6"
					}
				],
				"subs": [
					{
						"title": "Good headings",
						"paragraphs": [
							{
								"li": "Write the key information at the beginning.",
								"pre": "<!-- DO: -->\n<li>Great White Shark Facts</li>\n<li>Hammerhead Shark Facts</li>\n<!-- DONT: -->\n<li>Facts about great white sharks</li>\n<li>Facts about Hammerhead sharks</li>",
								"preLang": "markup"
							},
							{
								"li": "Usually the first heading is the page name or the overall heading, the second headings indicate the different sections"
							},
							{
								"li": "Also have a look at the guidelines regarding <a href=\"headings\">headings for people with cognitive disabilities</a>."
							}
						]
					}
				]
			},
			{
				"title": "Navigation/Menus",
				"paragraphs": [
					{
						"li": "Use list of links to help screen readers announce the number of links a menu has. Generally use unordered lists <code>ul</code> but when the order matters as in table of contents use ordered lists <code>ol</code>."
					},
					{
						"li": "Indicate the current page by adding 'Current Page:' in front of the respective element in the menu. Additionally, to make sure that the current page is obvious, the current page should not be linked. See the <a href=\"#Menus-3\">example below</a>."
					},
					{
						"li": "Wrap the menu in a <code>nav</code> tag with <code>role=\"navigation\"</code> and a heading to label the menu. That heading can be visually hidden. This is an accessible menu that enables users to find it when listing all the headings or menus:",
						"example": {
							"pre": "<nav role=\"navigation\" aria-labelledby=\"mainmenu\">\n  <h2 id=\"mainmenu\" class=\"visuallyhidden\">Main Menu</h2>\n  <ul>\n    <li><span class=\"visuallyhidden\">Current: </span>Home</li>\n    <li><a href=\"#link\">About</a></li>\n    <li><a href=\"#link\">Contact</a></li>\n  </ul>\n</nav>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Navigation 'Main Menu', 2 items. -- Heading Level 2, Main Menu. -- Current. -- Home. -- Link, about. -- Link, contact."
						}
					}
				],
				"subs": [
					{
						"title": "Drop Downs",
						"paragraphs": [
							{
								"li": "Drop downs should be only visually hidden to be accessible for screen reader. Ideally the visuallyhidden class would then be toggled via javascript. See <a href=\"#Hiding-Elements\">hiding elements</a> and <a href=\"#Drop-Downs-2\">the example below</a> for further information."
							},
							{
								"li": "Usually a drop down is another odered or unordered list inside the list item of the first ordered or unordered list:",
								"pre": "<nav role=\"navigation\" aria-labelledby=\"exampleNav1\">\n  <h2 id=\"exampleNav1\">Some Example Navigation</h2>\n  <ul>\n    <li><a href=\"#link\">Section1</a></li>\n    <li><a href=\"#link\">Section2</a>\n      <!-- submenu start -->\n      <ul class=\"visuallyhidden\">\n        <li><a href=\"#link\">Section2-1</a></li>\n        <li><a href=\"#link\">Section2-2</a></li>\n      </ul>\n      <!-- submenu end -->\n    </li>\n    <li><a href=\"#link\">Section3</a></li>\n  </ul>\n</nav>",
								"preLang": "markup"
							}
						]
					},
					{
						"title": "Breadcrumbs",
						"paragraphs": [
							{
								"li": "Use a <code>nav</code> tag with <code>role=\"navigation\"</code> and <code>aria-label=\"you are here\"</code>. Also add a visually hidden indice “current” to the last item.",
								"example": {
									"pre": "<nav class=\"breadcrumb\" role=\"navigation\" aria-label=\"You are here:\">\n  <a href=\"#link\">Home</a>\n  >\n  <a href=\"#link\">About Sharks</a>\n  >\n  <span class=\"visuallyhidden\">Current:</span> Hammerhead Shark Facts.\n</nav>\n",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Navigation 'You are here', 6 items. -- Link, Home. -- > -- Link, About Sharks. -- > -- Current. -- Hammerhead Shark Facts."
								}
							}
						]
					},
					{
						"title": "Skip Links",
						"paragraphs": [
							{
								"li": "Not every screen reader has advanced mechanism to jump to sections, headings, links, etc. or to skip repetitive codeblocks as Tables, Codeblocks, etc. So, this is probably one of the most important thing for a good screen reader user experience is providing links to jump immediatly to relevant sections and/or to skip repetitive content. On this page skip links were added before each code example to skip it. Moreover a visually hidden skip link was added at the begining of the page granting screen reader users the possibility to jump directly to either the table of contents, the menu or the content. PS: There is also a visually hidden easter egg somewhere, can you spot it?"
							},
							{
								"li": "Skip links are like normal links pointing to anchors (elements with IDs) on your page. You might want to hide them visually but display them on focus to improve the usability of your page for keyboard users as well:",
								"pre": "// Script to unhide Skiplinks on focus\nvar skiplinks = document.querySelectorAll('a.visuallyhidden');\nfor (var i = 0; i < skiplinks.length; i++) {\n  var el = skiplinks[i];\n  el.addEventListener('focus', function() {\n    el.classList.remove('visuallyhidden');\n  });\n  el.addEventListener('blur', function() {\n    el.classList.add('visuallyhidden');\n  }); }",
								"preLang": "javascript",
								"example": {
									"pre": "<p>Item</p>\n<a href=\"#linkNext\" class=\"visuallyhidden\">Skip annoying content to next item</a>\n<p>Annoying Content</p>\n<p id=\"linkNext\">Next item</p>",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Item. -- Link, Skip annoying content to next item. -- Press link: Skip annoying content to next item -- Next item."
								}
							},
							{
								"li": "It is a good practice to have a table of content linking to each heading within a long text. A table of content is nothing other than a <a href=\"#Navigation-Menus\">navigation menu</a>."
							}
						]
					}
				]
			},
			{
				"title": "Tables",
				"paragraphs": [
					{
						"li": "Any tabular data should be written in Tables as some screen reader have special features to recognise tables."
					},
					{
						"li": "Add a caption to your table explaining what it is about. Hide it visually if it is obvious for visual users."
					},
					{
						"li": "To make sure that the screen readers read your tables correctly include scoping. Use <code>scope=\"col\"</code> to identify the columns and <code>scope=\"row\"</code> to identify rows and <code>scope=\"colgroup\"</code> whenever a column spans over more than one item. This is how a complex accessible table could look like:",
						"example": {
							"pre": "<table class=\"exampletable\">\n  <caption>Edible elements:</caption>\n  <tr>\n    <td scope=\"col\"></td>\n    <th scope=\"col\">Edible</th>\n    <th colspan=\"2\" scope=\"colgroup\">Not Edible</th>\n    <th scope=\"col\">Maybe Edible</th>\n  </tr>\n  <tr>\n    <th>Apple</th>\n    <td scope=\"row\">Fruit</td>\n    <td>Computer</td>\n    <td>Corporation</td>\n    <td>Special</td>\n  </tr>\n</table>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Edible elements, table 5 columns, 2 rows. -- Edible, column 2. -- Spans 2 columns, Not edible, column 3. -- Maybe edible, colum 5. -- Row 2, Apple. -- Edible, Fruit, column 2. -- Not edible, Computer, column 3 -- Corporation. -- Maybe edible, Special, column 5."
						}
					},
					{
						"li": "Do not use tables for layout purpose, that is not what they are intendet for. It would probably mess up the screen reader."
					},
					{
						"li": "Keep it simple. If you have complex data, use several Tables to represent it instead of one. [V][A][P][C]"
					},
					{
						"li": "Give table data a different look to table headings. [A][P][C]"
					},
					{
						"li": "Zebra tables (where every second row has a light background) are good practice for long tables so that the user don’t get lost [A][P][C]"
					}
				]
			},
			{
				"title": "SVG",
				"paragraphs": [
					{
						"li": "You can use your SVGs within an <code>img</code> tag, then the <a href=\"#images\">same rules as for images</a> apply."
					},
					{
						"li": "If you inline your SVG and they are a collection of elements that form an image. Then add <code>role=\"img\"</code> to your container. Then, add a <code>role=\"presentation\"</code> to the svg elements to hide them from the screen reader, as seen in the <a href=\"#SVG-3\">example below</a>."
					},
					{
						"li": "If they are not <a href=\"#Purely-Decorative\">purely decorative elements</a> usually a <code>title</code> with the respective <code>aria-labelledby=\"titleID descID\"</code>. Here is an example borrowed from the <a href=\"https://www.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\">paciellogroup</a>:",
						"example": {
							"pre": "<svg xmlns=http://www.w3.org/2000/svg role=\"img\" aria-labelledby=\"title  desc\">\n   <title id=\"title\">Circle</title>\n   <desc id=\"desc\">Large circle with a fat border</desc>\n   <circle role=\"presentation\" cy=\"60\" cx=\"60\" r=\"35\" stroke=\"black\" stroke-width=\"2\" \n   fill=\"grey\" />\n</svg>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Circle large circle with a fat border, image."
						}
					},
					{
						"li": "You can use text and links within svg. For modern screen reader, the <code>text</code> tag is accessible by default but you should add a <code>role=\"link\"</code> to your links",
						"example": {
							"pre": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"30\" viewBox=\"0 0 300 300\">\n  <a xlink:href=\"#link\">\n    <text x=\"-300\" y=\"150\" font-family=\"Verdana\" font-size=\"125\">\n      Hello out there\n    </text>\n  </a>\n</svg>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Link, Hello out there"
						}
					},
					{
						"li": "If your SVG contains content that is interactive, you’ll need to make sure that the interactive elements are targetable. That might be done with the <code>role=\"link\"</code>."
					},
					{
						"li": "To know if your SVG is purely decorative and what to do, have a look at the <a href=\"#Purely-Decorative\">purely decorative elements</a> section."
					},
					{
						"li": "To learn when to add a title and description see <a href=\"#alternative-description\">Alternative Description</a> section."
					}
				]
			},
			{
				"title": "Images",
				"paragraphs": [
					{
						"li": "If your image provides information and is not <a href=\"#Purely-Decorative\">purely decorative</a> provide it with a <a href=\"#alternative-description\">good alternative description</a>.",
						"example": {
							"pre": "<img src=\"img.jpg\" alt=\"Dog with a bell attached to its collar\" style=\"height: 50px;\">",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Dog with a bell attached to its collar, Image"
						}
					},
					{
						"li": "To provide textual information to any reader, you can add a <code>caption</code> to your image. Give it the <code>role=\"group\"</code> to semantically group the caption and image",
						"example": {
							"pre": "<figure role=\"group\">\n  <img src=\"img.jpg\" alt=\"Dog with a bell attached to its collar\" style=\"height: 50px;\">\n  <figcaption>The bell worn by off-duty guide dogs helps the blind owner keep track of the dog’s location.</figcaption>\n</figure>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Group 2 items. -- Dog with a bell attached to its collar, Image. -- The bell worn by off-duty guide dogs helps the blind owner keep track of the dog’s location. -- End of group."
						}
					},
					{
						"li": "In some cases the image is <a href=\"#Purely-Decorative\">purely decorative</a>. If so, you should still provide an alt attribute but leave it empty. Otherwise some sceen reader will read the image filename instead. To be sure that it does not get read add a <code>role=\"presentation\"</code> and/or <code>aria-hidden=\"true\"</code>.",
						"pre": "<img src=\"img.jpg\" alt=\"\" aria-hidden=\"true\">",
						"preLang": "markup"
					},
					{
						"li": "If you use image maps, add alt attributes and make sure not to use any id or name twice on the same document.",
						"example": {
							"pre": "<img src=\"img.jpg\" alt=\"Chairmen of XY Corp\" usemap=\"#Map\" style=\"height:50px;\">\n<map id=\"Map\" name=\"Map\">\n    <area alt=\"Davy Jones\" shape=\"rect\" coords=\"176,14,323,58\" href=\"#link\" style=\"background-color: red;\">\n    <area alt=\"Harry Brown\" shape=\"rect\" coords=\"6,138,155,182\" href=\"#link\" style=\"background-color: red;\">\n</map>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Chairmen of XY Corp, image map -.. | Interact with Chairmen of XY Corp, image map, two items, link Davy Jones. -- Link, Harry Brown"
						}
					}
				]
			},
			{
				"title": "alternative description",
				"paragraphs": [
					{
						"li": "Here you will learn common cases when and how to label based on images but same comes true for any other visual element. The <a href=\"#good-alternatives\">good alternatives</a> sub-section gives you more general information on how to label. Also, have a look at the <a href=\"#Purely-Decorative\">purely decorative elements</a> sub-section to know when not to label."
					},
					{
						"li": "Any element with text should be accessible. So, if there is text in your image add an <code>alt=\"Text\"</code> attribute containing that text. However, nowadays it is possible to style text with css. Textual be should be real text. For Mathematical Formulas see <a href=\"https://www.w3.org/Math/\">MathML</a>."
					},
					{
						"li": "When the elemnt labels other information, add an alt attribute with the respective information.",
						"pre": "<img src=\"phone.png\" alt=\"Phone:\"> 0123 456 7890",
						"preLang": "markup"
					},
					{
						"li": "When your element supplements other information, add an alternative",
						"pre": "<img src=\"fire-extinguisher-car.jpg\" alt=\"Fire extinguisher in a cars’ trunk.\">\nDon’t forget to equip you car with a fire extinguisher",
						"preLang": "markup"
					},
					{
						"li": "Instructions should be accessible.",
						"pre": "<img src=\"instruction.jpg\" alt=\"Turn the biggest knob ontop of your ghetto blaster to the right to increase volume and to the left to decrease volume\">",
						"preLang": "markup"
					},
					{
						"li": "If your elements convey clear impressions or emotions it makes sense to provide them to everyone.",
						"pre": "<img src=\"children-play-area.jpg\" alt=\"we’re family friendly\">",
						"preLang": "markup"
					},
					{
						"li": "Showing the format of a file",
						"pre": "<a href=\"#link\">\n  <img src=\"pdf.png\" alt=\"PDF:\">\n  Download ticket\n</a>",
						"preLang": "markup"
					},
					{
						"li": "Do not describe your logos in detail (no matter how cool it is), the brands name and maybe claim is sufficient."
					},
					{
						"li": "Conveying information within link text:",
						"pre": "<a href=\"#link\" target=\"_blank\">\n  Google <img src=\"new-window.png\" alt=\"open in new window\">\n</a>\n<!-- svg -->\n<a href=\"#link\" target=\"_blank\">\n  Google\n  <svg xmlns=http://www.w3.org/2000/svg role=\"img\" aria-labelledby=\"title\">\n    <title id=\"title\">open in new window</title>\n    <circle role=\"presentation\" cy=\"60\" cx=\"60\" r=\"35\" stroke=\"black\" stroke-width=\"2\" fill=\"grey\" />\n  </svg>\n</a>",
						"preLang": "markup"
					},
					{
						"li": "Have accessible functional elements.",
						"pre": "<a href=\"javascript:print()\">\n  <img src=\"print.png\" alt=\"Print this page\">\n</a>\n<!-- instead of alt=\"Printer\" -->",
						"preLang": "markup"
					},
					{
						"li": "For complex images you’ll need a two-part alternative. The first part is a brief description to identify the image, the second part is a long description near the visual element as text or on as an external link pointing to a text. Use the <code>longdesc=\"#longdesc\"</code> attribute to link to the long description and <code>aria-describedby=\"longdesc\"</code> if the long description is not directly adjacent. Using the longdesc alone is not a good idea since it lacks of support and it leaves out visual users. See the <a href=\"#SVG-3\">SVG example<a> for SVGs.",
						"pre": "<figure role=\"group\">\n  <img src=\"chart.png\" alt=\"Pie chart showing ethnic groups in london\">\n  <figcaption>\n    <a href=\"#link\">Ethnic groups (text description of the pie chart)</a>\n  </figcaption>\n</figure>\n<!-- or -->\n<figure role=\"group\">\n  <img src=\"chart.png\" alt=\"Pie chart showing ethnic groups in london, described in detail below.\"\n    longdesc=\"#chart-longdesc\">\n  <figcaption id=\"chart-longdesc\">\n    <h2>Values</h2>\n    <table>\n      [...]\n    </table>\n  </figcaption>\n</figure>",
						"preLang": "markup"
					},
					{
						"li": "When multiple images convey one information you only have to add a description to the first one.",
						"pre": "<img src=\"star-full.jpg\"  alt=\"1.5 out of 3 stars\">\n<img src=\"star-half.jpg\"  alt=\"\">\n<img src=\"star-empty.jpg\"  alt=\"\">",
						"preLang": "markup"
					}
				],
				"subs": [
					{
						"title": "Good alt-ernatives",
						"paragraphs": [
							{
								"li": "don’t describe your elements if they are <a href=\"#Purely-Decorative\">purely decorative</a>."
							},
							{
								"li": "Aim to put the most important information at the beginning of your sentence.",
								"pre": "Green Apples\nRed Apples\nYellow Apples\n<!-- Instead of -->\nApples - Green\nApples - Red\nApples - Yellow",
								"preLang": "markup"
							},
							{
								"li": "Add a <a href=\"#alternative-description-11\">long description</a> if anything more than a short phrase is needed to describe the element."
							},
							{
								"li": "Use normal punctuation in your alternative just like normal text."
							},
							{
								"li": "Avoid Abbreviations."
							},
							{
								"li": "The text has to give the same information as the image. That is, if someone cannot see the image, they get the important information from the image. If you were helping someone read and interact with the web page and they cannot see it, how would you describe the image?"
							},
							{
								"li": "Keywords as “image”, “button”, “icon”, or “picture” in the alternative are redundant."
							},
							{
								"li": "Examples for extensive descriptions (borrowed from <a href=\"http://4syllables.com.au/articles/decorative-images/\">4syllabes</a>):",
								"pre": "“Two staff members wearing safety gear, shown working outdoors collecting information on a laptop and mobile phone”, \n“Eucalypt leaf, Tidbinbilla Nature Reserve, Australian Capital Territory”,\n“A researcher draws blood from a patient’s arm”,\n“3 young children, two boys and a girl, play with 2 golden labrador puppies, soon to be trained as seeing eye dogs”",
								"preLang": "markup"
							},
							{
								"li": "Typically the alternative is not a literal description of the image but conveys the meaning of the image. Here are some examples <a href=\"https://www.w3.org/TR/WCAG20-TECHS/G94\">from w3</a> to illustrate that fact:",
								"pre": "> A chart showing sales for October has an short text alternative of \"October sales chart\". It also has a long description that provides all of the information on the chart.\n> A search button uses an image of a magnifying glass. The text alternative is \"search\" and not \"magnifying glass\".\n> A picture shows how a knot is tied including arrows showing how the ropes go to make the knot. The text alternative describes how to tie the knot, not what the picture looks like.\n> A picture shows what a toy looks like from the front. The text alternative describes a front view of the toy.\n> An animation shows how to change a tire. A short text alternative describes what the animation is about. A long text alternative describes how to change a tire.\n> The text alternative should be “print this page” rather than “(image of a) printer”, “search” rather than “magnifying lens” or “Example.com home page” rather than “Example.com logo”.",
								"preLang": "markup"
							},
							{
								"li": "DO NOT use short descriptions as:",
								"pre": "“banner”, “news item graphic”, “smiling people”,\n“plant”, “open day photo”, “decorative element”,\n“funny bread”, “needle”, “kids with toys”,\n etc.",
								"preLang": "markup"
							}
						]
					},
					{
						"title": "Purely Decorative",
						"paragraphs": [
							{
								"li": "Do not to add titles, descriptions or anything that could possibly be read. For images, make sure that there is an empty alt attribute without any space characters <code>alt=\"\"</code> otherwise most screen reader will read the filename instead. To make it even more unlikely that the element is read, add the <code>role=\"presentation\"</code> or/and <code>aria-hidden=\"true\"</code> which are supported by modern screen reader."
							},
							{
								"li": "Note that the traditional methods used to hide elements as <code>visibility=\"hidden\"</code> or <code>display=\"none\"</code> hide the element for everyone, also for screen reader. If you want to hide elements for visual users but keep them available for screen reader use the technique described in the <a href=\"Hiding-Elements\">Hiding Elements section</a>. If you want to hide elements only for screen reader users and keep them visible for visual users use the attribute <code>aria-hidden=\"true\"</code>"
							},
							{
								"li": "The Web Content Accessibility Guidelines 2.0 defines purely decorative images as: “serving only an aesthetic purpose, providing no information, and having no functionality”"
							},
							{
								"li": "Elements used as part of the design as borders, ornaments and similar are purely decorative elements and should not be accessible."
							},
							{
								"li": "Images and other elements that are part of links mostly to increase the clickable area and provide Structure and call to action anchorpoints for the eye are annoying for screen reader users, thus should not be accessible."
							},
							{
								"li": "When the text alternative is adjacent to the element, the element itself should not be accessible to prevent hearing redundant information.",
								"pre": "<img src=\"grandmothers.jpg\" alt=\"\">\n<strong>Grandmothers play an important role in our development:</strong>",
								"preLang": "markup"
							},
							{
								"li": "Elements used for ambience may not be accessible unless those elements convey information."
							},
							{
								"li": "Elements that convey branding, feelings, moods and anything else that is not related to the content are purely decorative. Face the fact that most users are there for the information not to check out how cool the branding is. Brand values or messages can be communicated in text, but they require something more creative than a simple description of the content of an image."
							},
							{
								"li": "According to <a href=\"http://4syllables.com.au/articles/decorative-images/\">Dey Alexanders observations</a> during usertest, Screen reader users, even very experienced ones, sometimes become confused by text alternatives for decorative images. Some might even try to click on images (that aren’t links) because the text alternative mentioned a word or phrase related to their task."
							},
							{
								"li": "Background images, article banners, thumbnails and small elements supporting links are most likely purely decorative."
							},
							{
								"li": "The W3C Web Accessibility initiative put up a valuable <a href=\"https://www.w3.org/WAI/tutorials/images/decision-tree/\">decision tree</a> to support your decisions."
							}
						]
					}
				]
			},
			{
				"title": "Forms",
				"paragraphs": [
					{
						"li": "Use the right types for your fields. As filling out forms is one of the most important task on the web, the screen reader support ist very good.",
						"table": {
							"caption": "which type is for what?",
							"heads": [
								"type=\"\"",
								"job",
								"learn more"
							],
							"rows": [
								[
									"range",
									"range selectors",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">MDN</a>"
								],
								[
									"file",
									"file selection",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">MDN</a>"
								],
								[
									"color",
									"color selection",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">MDN</a>"
								],
								[
									{
										"manyMoreTitle": "More",
										"manyMoreSpan": "3",
										"manyMoreUrl": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes",
										"manyMoreUrlHash": "NO",
										"manyMore": [
											"button",
											"checkbox",
											"date",
											"datetime-local",
											"email",
											"hidden",
											"image",
											"month",
											"number",
											"password",
											"radio",
											"reset",
											"search",
											"submit",
											"tel",
											"text",
											"time",
											"url",
											"week"
										]
									}
								]
							]
						}
					},
					{
						"li": "Group elements that belong together using <code>fieldset</code> and <code>legend</code> tags. Enhance the support by using the <code>group</code> role and <code>aria-labelledby</code>",
						"pre": "<fieldset role=\"group\" aria-labelledby=\"output\">\n<legend id=\"output\">Output format</legend>\n  <div>\n    <input type=\"radio\" name=\"format\" id=\"pdf\" value=\"txt\" checked>\n    <label for=\"pdf\">PDF file</label>\n  </div>\n  <div>\n    <input type=\"radio\" name=\"format\" id=\"png\" value=\"csv\">\n    <label for=\"png\">PNG file</label>\n  </div>\n</fieldset>",
						"preLang": "markup"
					},
					{
						"li": "Provide instructions that apply to the form when necessary. For example, indicate any required and optional input, allowable data formats, input format and timing limitations."
					}
				],
				"subs": [
					{
						"title": "Labels",
						"paragraphs": [
							{
								"li": "Buttons don’t require labels but the if they have no text, then they need a <code>value=\"\"</code> attribute"
							},
							{
								"li": "Always add labels. Use <code>for=\"\"</code> attributes matching the form fields ID. If the context is clear visually you might <a href=\"#Hiding-Elements\">visually hide</a> the labels or only add an <code>aria-label=\"Search\"</code> attribute. If IDs cannot be provided you might encapsulate the field with its label.",
								"example": {
									"pre": "<label for=\"exampleName\">Name:</label>\n<input type=\"text\" name=\"name\" id=\"exampleName\">\n<!-- or -->\n<input type=\"email\" name=\"email\" aria-label=\"email:\">\n<!-- or -->\n<label>\n  Subscribe to newsletter: \n  <input type=\"checkbox\" name=\"subscribe\">\n</label>",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Name:. -- Name:, edit text. -- Email:, edit text. -- Subscribe to newsletter:. -- Subscribe to newsletter:, checkbox."
								}
							}
						]
					},
					{
						"title": "Errors",
						"paragraphs": [
							{
								"li": "Show errors not only with color. Write them out. Adding a text explaining which part was incorrect and why near the label and bundled errors on top (ideally with <a href=\"#Skip-Links\">skiplinks</a> to jump to the incorrect formfield)."
							},
							{
								"li": "Use <code>role=\"alert\"</code> with <code>aria-live=\"assertive\"</code> or <code>aria-live=\"polite\"</code>. Assertive will be pushed immediately to the screen reader as soon as the ellement appears while Polite will wait until the screen reader is done with its current task. <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role\">Read more on MDN</a>. It is a good practice to add it on the title of your error summaries.",
								"pre": "<h1 role=\"alert\" aria-live=\"assertive\">3 Errors: [...]</h1>",
								"preLang": "markup"
							},
							{
								"li": "Also, change the title of the page accordingly: “3 Errors –” or “Success –”"
							}
						]
					},
					{
						"title": "Anti Spam",
						"paragraphs": [
							{
								"li": "As a general usability rule, try to avoid active anti-spams whenever possible."
							},
							{
								"li": "If you use captchas make sure to also provide voice checks and add an alternative way to still reach the goal even if the captcha fails. I.e. an email address for direct contact."
							},
							{
								"li": "Simple tests as “write ‘Hello World’ into this field:” are o.k. just make sure not to ask for things a blind person could not answer i.e. asking for colors."
							},
							{
								"li": "Always make sure that your anti spam solutions are usable for everyone. Google did an <a href=\"http://simplyaccessible.com/article/googles-no-captcha/\">o.k. job</a> with their <a href=\"https://www.google.com/recaptcha/intro/index.html\">newest captcha</a>."
							}
						]
					},
					{
						"title": "Required Fields",
						"paragraphs": [
							{
								"li": "Indicate required fields not only visually. It has become a convention to add an asterisk * but explain that asterisk somewhere. You can also simply add the keyword “required”. Provide inline instructions when necessary."
							},
							{
								"li": "Use the <code>required</code> attribute and the <code>aria-required=\"true\"</code> on required fields. Note that the screen reader will read required twice (once from the label and once from the aria)",
								"example": {
									"pre": "<label for=\"name\">Name (required): </label>\n<input type=\"text\" name=\"name\" id=\"name\" required aria-required=\"true\">",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Name (required). -- Name (required), required, edit text."
								}
							},
							{
								"li": "Users should be able to check their own input and correct it if the data is important."
							},
							{
								"li": "require user confirmation for irreversible actions & provide undo mechanisms for reversible actions."
							}
						]
					}
				]
			},
			{
				"title": "Javascript",
				"paragraphs": [
					{
						"li": "A common myth is that screen reader do not support javascript. However, the shiny truth is that <a href=\"http://webaim.org/projects/screenreadersurvey5/#javascript\">they do support javascript</a>. That is great news. None the less, accessibility is not only about screen reader users and there are <a href=\"https://gds.blog.gov.uk/2013/10/21/how-many-people-are-missing-out-on-javascript-enhancement/\">~1% of users without javascript</a> for <a href=\"http://www.punkchip.com/why-support-javascript-disabled/\">diverse reasons</a>. Ideally build your websites so that they work without javascript and then add a javascript layer on top of it."
					},
					{
						"li": "Have accessibility in mind when using javascript. Provide a way to have users be aware of changes triggered via javascript, try to not disable the normal functionalities of the browser, make it device independant. Unfortunately there is no one-fits-all solutions. However, a common mistake is i.e. removing the link href and adding an onclick event that handles the link. A better approach is to keep the default but then prevent it with javascript:",
						"pre": "add example from book",
						"preLang": "markup"
					},
					{
						"li": "Another thought problem is on how to make ajax request accessible. Since they are asyncron it is difficult for a screen reader user to tell what is happening. <a href=\"http://webaim.org/techniques/ajax/\">Webaim.org suggests</a> to give your users controll over dynamical updates such as by activating a link or button. Also, not to remove the keyboard focus. The <a href=\"https://www.w3.org/TR/WCAG20/#time-limits-pause\">WCAG 2.0 suggests</a> that content updating dynamically for more than 5 seconds must provide the ability to pause, stop, or hide that dynamic content."
					},
					{
						"li": "Inform users about updates using <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\">ARIA live regions</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role\">alert roles</a> or by setting focus to the newly updated content area."
					}
				]
			},
			{
				"title": "WAI-ARIA & Roles",
				"paragraphs": [
					{
						"p": "WAI-ARIA stands for Web Accessibility Initiative - Accessible Rich Internet Applications. It is a W3C Standard thus those features should be used even if announced by screen readers. If it is not supported yet, it will be in the near future. It also give screen readers usefull semantic information. WAI-ARIA allows interaction with even extremely complex websites declaring certain elements on the page with roles and attributes. It works by adding metadata to the HTML tags. Here, some of the most important are explained. A full reference is up on W3C for all <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties\">attributes</a>, <a href=\"https://www.w3.org/TR/wai-aria/roles\">roles and landmarks</a>."
					}
				],
				"subs": [
					{
						"title": "Attributes",
						"paragraphs": [
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-busy\">aria-busy</a> indicates when an element is loading. I.e. when elements are loaded dynamically aria-busy can be set to true while loading and to false when finished. Elements being loaded within the <code>role=\"mustContain\"</code> have to be marked with <code>aria-busy=\"true\"</code>. If there is an error aria-invalid should be set.",
								"pre": "<ul aria-busy=\"true\">\n  <li>Loading...</li>\n</ul>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-controls\">aria-controls</a> identify elements whose contents are controlled by the current element. Similar to the <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-owns\">aria-owns</a> attribute which identifies a visual, functional, or contextual parent/child relationship when it cannot be provided in the markup. (both not announced by VoiceOver2016)",
								"pre": "<button role=\"button\" aria-controls=\"amount\">Increase amount by 1</button>\n<p id=\"amount\">1</p>\n\n<div aria-owns=\"child\">Parent</div>\n<div id=\"child\">Child</div>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-describedby\">aria-describedby</a> identify elements that describe the current element.",
								"pre": "<div aria-describedby=\"#exampleDescription\">Strange Thing</div>\n<p id=\"exampleDescription\">Representing [...]</p>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-disabled\">aria-disabled</a> indicate disabled elements, those should additionally be visually geyed out and the tabindex should be removed. While <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-readonly\">aria-readonly</a> indicate elements where the user cannot change the value but in contrast to disabled elements is still able to navigate to descendants.",
								"example": {
									"pre": "<input type=\"checkbox\" aria-disabled=\"true\" disabled>",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "dimmed, checkbox."
								}
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-grabbed\">aria-grabbed</a> and <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-dropeffect\">aria-dropeffect</a> indicates the state in a drag and drop operation. <code>aria-grabbed=\"true\"</code> indicates that an element is currently being dragged. <code>aria-grabbed=\"false\"</code> indicates that the element not being dragged but can be. The <code>aria-dropeffect</code> should be added to all elements where the currently dragged element can be dropped. It can have multiple values separated by a blank space: <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-dropeffect\">copy</a>, <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-dropeffect\">move</a>, <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-dropeffect\">link</a>, <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-dropeffect\">execute</a>, <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-dropeffect\">popup</a>.",
								"pre": "<div aria-grabbed=\"false\">Draggable</div>\n<div aria-dropeffect=\"move execute\">Target</div>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-haspopup\">aria-haspopup</a> indicates that the element has a popup context menu or sub-level menu. A popup is generally a group of items that appear to be on top of the main page content.",
								"pre": "<li aria-haspopup=\"true\">\n  <button role=\"button\">Click me to reach sublevel</button>\n  <ul>\n    <li>Sub Level</li>\n  </ul>\n</li>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-haspopup\">aria-haspopup</a> indicates that the element has a popup context menu or sub-level menu. A popup is generally a group of items that appear to be on top of the main page content.",
								"pre": "<li aria-haspopup=\"true\">\n  <button role=\"button\">Click me to reach sublevel</button>\n  <ul>\n    <li>Sub Level</li>\n  </ul>\n</li>",
								"preLang": "markup"
							},
							{
								"li": "As seen in the <a href=\"Hiding-Elements\">hiding elements</a> section <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-hidden\">aria-hidden</a> hides elements from the screen reader.",
								"example": {
									"pre": "<p>This is <span aria-hidden=\"true\">hidden</span>.</p>",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "This is."
								}
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-invalid\">aria-invalid</a> announce screen reader users that the elements have invalid data. I.e. you should add this to any form where the value entered by the user has failed validation.",
								"example": {
									"pre": "<input type=\"text\" aria-invalid=\"true\">\n<input type=\"text\" aria-invalid=\"grammar\">\n<input type=\"text\" aria-invalid=\"spelling\">",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Invalid data, edit text. -- Invalid grammar, edit text. -- Invalid spelling, edit text."
								}
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-label\">aria-label</a> is, with <a href=\"#Attributes-12\">aria-labelledby</a> probably the most used WAI-ARIA attribute. It defines a string that labels the current element. Used for example in <a href=\"#Structure-10\">structure</a>, <a href=\"#Structure-3\">searchfields</a>, <a href=\"#Breadcrumbs-1\">breadcrumbs</a> and <a href=\"#Labels-2\">inputs</a>. If the label is visible in the document you should use <a href=\"#Attributes-12\">aria-labelledby</a> instead.",
								"example": {
									"pre": "<input type=\"email\" name=\"email\" aria-label=\"email:\">",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Email:, edit text."
								}
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-labelledby\">aria-labelledby</a> is, with <a href=\"#Attributes-11\">aria-label</a> probably the most used WAI-ARIA attribute. It defines a element that labels the current element. Used for example in <a href=\"#Structure-9\">structuring sections</a>, <a href=\"#Drop-Downs-2\">navigations</a>, <a href=\"#SVG-3\">SVGs</a> and <a href=\"#Forms-2\">fieldsets</a>. If the label is not visible in the document you should use <a href=\"#Attributes-11\">aria-label</a> instead.",
								"example": {
									"pre": "<section aria-labelledby=\"example\">\n  <h2 id=\"example\">This is an example.</h2>\n</section>",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Region 'This is an example', one item. -- Heading level 2, This is an example."
								}
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-live\">aria-live</a> indicates that an element will be updated. I.e. used with the <a href=\"@REPLACE\">alert role</a> it sets the tipe of allert. Polite will wait for the screen reader to end its current task and then read the element aloud while assertive reads it out aloud immediately. Note: that it will be read out aloud as soon as its rendered and visible. It is a good practice to use it when fields have <a href=\"#Errors-2\">errors</a>.",
								"pre": "<section aria-labelledby=\"example\">\n  <h2 id=\"example\">This is an example.</h2>\n</section>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-flowto\">aria-flowto</a> is used to change the regular flow of a doument. (<a href=\"http://3needs.org/en/testing/code/aria-flowto.html\">poor support</a>)",
								"pre": "<div aria-flowto=\"second\">1</div>\n<div>3</div>\n<div id=\"second\">2</div>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-autocomplete\">aria-autocomplete</a> indicate if completion suggestions are provided.",
								"pre": "<textarea aria-autocomplete=\"inline\">The suggestions are provided inline, after the users input.</textarea>\n<textarea aria-autocomplete=\"list\">A list of choices appears from which the user can choose.</textarea>\n<textarea aria-autocomplete=\"both\">Both types are provided.</textarea>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-expanded\">aria-expanded</a> indicate if the element is currently collapsed or expanded.",
								"example": {
									"pre": "<button aria-expanded=\"false\" role=\"button\">Toggle 1</button>\n<button aria-expanded=\"true\" role=\"button\">Toggle 2</button>",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Toggle 1, collapsed, button. -- Toggle 2, expanded, button."
								}
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-level\">aria-level</a> indicate the level of an element. I.e. to <a href=\"#Headings-4\">expand headings</a> further down than level 6.",
								"example": {
									"pre": "<p role=\"heading\" aria-level=\"9000\">wow</p>",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "heading, level 9000, wow."
								}
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-multiline\">aria-multiline</a> indicates whether a text box accepts multiple lines of input or only a single line. This changes the default behaviour in forms, if set to true the enter button will not submit the form.",
								"pre": "<textarea aria-autocomplete=\"inline\">The suggestions are provided inline, after the users input.</textarea>\n<textarea aria-autocomplete=\"list\">A list of choices appears from which the user can choose.</textarea>\n<textarea aria-autocomplete=\"both\">Both types are provided.</textarea>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-multiselectable\">aria-multiselectable</a> Indicates that the user may select more than one item from the current selectable descendants. Here is an example by <a href=\"http://cookiecrook.com/test/aria/multiselect/listbox.html\">James Craig</a>.",
								"pre": "<div role=\"application\">\n  <h1 id=\"listlabel\">ARIA Multiselectable Listbox Example</h1>\n  <ul id=\"list0\" role=\"listbox\" aria-labelledby=\"listlabel\" aria-activedescendant=\"list0_item1\" aria-multiselectable=\"true\" tabindex=\"0\">\n    <li id=\"list0_item0\" role=\"option\" aria-selected=\"false\">foo</li>\n    <li id=\"list0_item1\" role=\"option\" aria-selected=\"false\">bar</li>\n    <li id=\"list0_item2\" role=\"option\" aria-selected=\"false\">baz</li>\n  </ul>\n</div>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-orientation\">aria-orientation</a> used in scrollbar, separator and slider to Indicates whether the element and orientation is horizontal or vertical. Example via <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-orientation_attribute\">MDN</a>.",
								"pre": "<a href=\"#\" id=\"handle_zoomSlider\"\n   role=\"slider\"\n   aria-orientation=\"vertical\"\n   aria-valuemin=\"0\"\n   aria-valuemax=\"17\"\n   aria-valuenow=\"14\">\n  <span>11</span>\n</a>",
								"preLang": "markup"
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-pressed\">aria-pressed</a> as for <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-pressed\">aria-checked</a> and <a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-pressed\">aria-selected</a> does what the name suggest, they indicate whether the element is checked, selected or pressed. They can be set to true, false or mixed where mixed is a mixed mode value for a tri-state element. However, selected has no mixed value. Ususally when using standart html elements as buttons the state is identified by default and does not require extra aria attributes. They might make sense if you construct your own elements."
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-required\">aria-required</a> indicates that user input is required. As seen under <a href=\"#Required-Fields-2\">required fields</a> This should be added to any required formfield, don’t forget to provide a visual indice as well.",
								"example": {
									"pre": "<input type=\"text\" name=\"name\" required aria-required=\"true\">",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Required, edit text."
								}
							},
							{
								"li": "<a href=\"https://www.w3.org/TR/wai-aria/states_and_properties#aria-sort\">aria-sort</a> indicates if items in a table or grid are sorted in ascending or descending order. Simplified example of <a href=\"http://maxdesign.com.au/jobs/sample-accessibility/07-tables/15-sortable.html\">maxdesign</a>:",
								"pre": "<table id=\"exampleTable\">\n  <thead>\n  <tr>\n    <th aria-label=\"Account name: Ascending sort applied, activate to apply a descending sort\" aria-sort=\"ascending\" aria-controls=\"exampleTable\" role=\"columnheader\" scope=\"col\" tabindex=\"0\">\n      Account name </th>\n  </tr>\n  </thead>\n  <tbody aria-relevant=\"all\" aria-live=\"polite\">\n  <tr>\n    <td>Personal account</td>\n    <td>Main Account</td>\n  </tr>\n  </tbody>\n</table>",
								"preLang": "markup"
							}
						]
					},
					{
						"title": "Roles",
						"paragraphs": [
							{
								"p": "This section has to be completed, see the roles listing at "
							},
							{
								"li": "Here is a convenient list or roles extracted from the <a href=\"https://www.w3.org/TR/wai-aria/roles\">W3C Reference</a> in alphabetical order.",
								"table": {
									"caption": "which role is for what?",
									"heads": [
										"role=\"\"",
										"job",
										"learn more"
									],
									"rows": [
										[
											"alert",
											"A message with important, and usually time-sensitive, information. See related alertdialog and status.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#alert\">W3C</a>"
										],
										[
											"alertdialog",
											"A type of dialog that contains an alert message, where initial focus goes to an element within the dialog. See related alert and dialog.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#alertdialog\">W3C</a>"
										],
										[
											"article",
											"A section of a page that consists of a composition that forms an independent part of a document, page, or site.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#article\">W3C</a>"
										],
										[
											"banner",
											"A region that contains mostly site-oriented content, rather than page-specific content.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#banner\">W3C</a>"
										],
										[
											"button",
											"An input that allows for user-triggered actions when clicked or pressed.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#button\">W3C</a>"
										],
										[
											"checkbox",
											"A checkable input that has three possible values: true, false, or mixed.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#checkbox\">W3C</a>"
										],
										[
											"columnheader",
											"A cell containing header information for a column.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#columnheader\">W3C</a>"
										],
										[
											"combobox",
											"A presentation of a select; usually similar to a textbox where users can type ahead to select an option, or type to enter arbitrary text as a new item in the list.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#combobox\">W3C</a>"
										],
										[
											"command",
											"A form of widget that performs an action but does not receive input data.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#command\">W3C</a>"
										],
										[
											"complementary",
											"A supporting section of the document, designed to be complementary to the main content at a similar level in the DOM hierarchy, but remains meaningful when separated from the main content.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#complementary\">W3C</a>"
										],
										[
											"composite",
											"A widget that may contain navigable descendants or owned children.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#composite\">W3C</a>"
										],
										[
											"contentinfo",
											"A large perceivable region that contains information about the parent document.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#contentinfo\">W3C</a>"
										],
										[
											"definition",
											"A definition of a term or concept.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#definition\">W3C</a>"
										],
										[
											"dialog",
											"A dialog is an application window that is designed to interrupt the current processing of an application in order to prompt the user to enter information or require a response.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#dialog\">W3C</a>"
										],
										[
											"directory",
											"A list of references to members of a group, such as a static table of contents.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#directory\">W3C</a>"
										],
										[
											"form",
											"A landmark region that contains a collection of items and objects that, as a whole, combine to create a form. See related search.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#form\">W3C</a>"
										],
										[
											"grid",
											"An interactive control which contains cells of tabular data arranged in rows and columns, like a table. Also, see <a href=\"http://www.w3.org/TR/wai-aria/roles#gridcell\">gridcell</a>",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#grid\">W3C</a>"
										],
										[
											"group",
											"A set of user interface objects which are not intended to be included in a page summary or table of contents by assistive technologies.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#group\">W3C</a>"
										],
										[
											"heading",
											"A heading for a section of the page.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#heading\">W3C</a>"
										],
										[
											"img",
											"A container for a collection of elements that form an image.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#img\">W3C</a>"
										],
										[
											"input",
											"A generic type of widget that allows user input.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#input\">W3C</a>"
										],
										[
											"landmark",
											"A region of the page intended as a navigational landmark.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#landmark\">W3C</a>"
										],
										[
											"link",
											"An interactive reference to an internal or external resource that, when activated, causes the user agent to navigate to that resource. See related button.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#link\">W3C</a>"
										],
										[
											"list",
											"A group of non-interactive list items. See related <a href=\"http://www.w3.org/TR/wai-aria/roles#listbox\">listbox</a> and <a href=\"http://www.w3.org/TR/wai-aria/roles#listitem\">listitem</a>.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#list\">W3C</a>"
										],
										[
											"log",
											"A type of live region where new information is added in meaningful order and old information may disappear.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#log\">W3C</a>"
										],
										[
											"main",
											"The main content of a document.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#main\">W3C</a>"
										],
										[
											"marquee",
											"A type of live region where non-essential information changes frequently.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#marquee\">W3C</a>"
										],
										[
											"math",
											"Content that represents a mathematical expression.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#math\">W3C</a>"
										],
										[
											"menu",
											"A type of widget that offers a list of choices to the user. See related: <a href=\"http://www.w3.org/TR/wai-aria/roles#menuitem\">menuitem</a>, <a href=\"http://www.w3.org/TR/wai-aria/roles#menuitemcheckbox\">menuitemcheckbox</a> and <a href=\"http://www.w3.org/TR/wai-aria/roles#menuitemradio\">menuitemradio</a>",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#menu\">W3C</a>"
										],
										[
											"menubar",
											"A presentation of menu that usually remains visible and is usually presented horizontally. Related: <a href=\"http://www.w3.org/TR/wai-aria/roles#menuitem\">menuitem</a>, <a href=\"http://www.w3.org/TR/wai-aria/roles#menuitemcheckbox\">menuitemcheckbox</a> and <a href=\"http://www.w3.org/TR/wai-aria/roles#menuitemradio\">menuitemradio</a>",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#menubar\">W3C</a>"
										],
										[
											"navigation",
											"A collection of navigational elements (usually links) for navigating the document or related documents.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#navigation\">W3C</a>"
										],
										[
											"note",
											"A section whose content is parenthetic or ancillary to the main content of the resource.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#note\">W3C</a>"
										],
										[
											"option",
											"A selectable item in a select list.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#option\">W3C</a>"
										],
										[
											"presentation",
											"An element whose implicit native role semantics will not be mapped to the accessibility API.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#presentation\">W3C</a>"
										],
										[
											"progressbar",
											"An element that displays the progress status for tasks that take a long time.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#progressbar\">W3C</a>"
										],
										[
											"radio",
											"A checkable input in a group of radio roles, only one of which can be checked at a time. Related: <a href=\"http://www.w3.org/TR/wai-aria/roles#radiogroup\">radiogroup</a>.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#radio\">W3C</a>"
										],
										[
											"range",
											"An input representing a range of values that can be set by the user.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#range\">W3C</a>"
										],
										[
											"region",
											"A large perceivable section of a web page or document, that is important enough to be included in a page summary or table of contents, for example, an area of the page containing live sporting event statistics.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#region\">W3C</a>"
										],
										[
											"roletype",
											"The base role from which all other roles in this taxonomy inherit.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#roletype\">W3C</a>"
										],
										[
											"scrollbar",
											"A graphical object that controls the scrolling of content within a viewing area, regardless of whether the content is fully displayed within the viewing area.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#scrollbar\">W3C</a>"
										],
										[
											"search",
											"A landmark region that contains a collection of items and objects that, as a whole, combine to create a search facility. See related form.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#search\">W3C</a>"
										],
										[
											"section",
											"A renderable structural containment unit in a document or application. Related: <a href=\"http://www.w3.org/TR/wai-aria/roles#sectionhead\">sectionhead</a>.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#section\">W3C</a>"
										],
										[
											"select",
											"A form widget that allows the user to make selections from a set of choices.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#select\">W3C</a>"
										],
										[
											"slider",
											"A user input where the user selects a value from within a given range.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#slider\">W3C</a>"
										],
										[
											"spinbutton",
											"A form of range that expects the user to select from among discrete choices.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#spinbutton\">W3C</a>"
										],
										[
											"status",
											"A container whose content is advisory information for the user but is not important enough to justify an alert, often but not necessarily presented as a status bar. See related alert.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#status\">W3C</a>"
										],
										[
											"structure",
											"A document structural element.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#structure\">W3C</a>"
										],
										[
											"tab",
											"A grouping label providing a mechanism for selecting the tab content that is to be rendered to the user. See related: <a href=\"http://www.w3.org/TR/wai-aria/roles#tablist\">tablist</a> and <a href=\"http://www.w3.org/TR/wai-aria/roles#tabpanel\">tabpanel</a>.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#tab\">W3C</a>"
										],
										[
											"timer",
											"A type of live region containing a numerical counter which indicates an amount of elapsed time from a start point, or the time remaining until an end point.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#timer\">W3C</a>"
										],
										[
											"toolbar",
											"A collection of commonly used function buttons or controls represented in compact visual form.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#toolbar\">W3C</a>"
										],
										[
											"tooltip",
											"A contextual popup that displays a description for an element.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#tooltip\">W3C</a>"
										],
										[
											"tree",
											"A type of list that may contain sub-level nested groups that can be collapsed and expanded. Also, see: <a href=\"http://www.w3.org/TR/wai-aria/roles#treegrid\">treegrid</a> and <a href=\"http://www.w3.org/TR/wai-aria/roles#treeitem\">treeitem</a>.",
											"<a href=\"http://www.w3.org/TR/wai-aria/roles#tree\">W3C</a>"
										],
										[
											{
												"manyMoreTitle": "Less common",
												"manyMoreSpan": "3",
												"manyMoreUrl": "http://www.w3.org/TR/wai-aria/roles",
												"manyMoreUrlHash": "#",
												"manyMore": [
													"application",
													"document",
													"row",
													"rowgroup",
													"rowheader",
													"separator",
													"structure",
													"textbox",
													"widget",
													"window"
												]
											}
										]
									]
								}
							}
						]
					}
				]
			},
			{
				"title": "Testing & ressources",
				"paragraphs": [
					{
						"p": "Found an error or have an addition? Please <a href=\"https://github.com/ThibaultJanBeyer/learn-accesibility/blob/master/CONTRIBUTE.md\">contribute</a> to this project via github."
					},
					{
						"li": "There are some automated testing tools as <a href=\"http://www.cynthiasays.com/\">CynthiaSays</a> and <a href=\"http://wave.webaim.org/\">WAVE</a> but because they can not do judgment calls, they are not as good as a human testing. So, the best way to test your website for visual accessibility is to actually use a screen reader yourself. Now as you don’t want to spend thousands of dollars use the ones you can get for free. On a Mac OS you can use the built in <a href=\"https://www.apple.com/voiceover/info/guide/\">VoiceOver</a>. On a Windows OS there is <a href=\"http://www.nvaccess.org/\">NVDA</a> which is backed by users and huge companies as Adobe and Google."
					},
					{
						"li": "References/Ressources used to write this page: <br>The Standart<br><a href=\"https://www.w3.org/TR/wai-aria/\">W3.org</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/\">MDN</a>, <a href=\"https://dev.opera.com/articles/introduction-to-wai-aria/\">dev.opera</a>, <a href=\"http://webaim.org/\">Webaim</a>, <a href=\"https://www.w3.org/WAI/tutorials/\">WAI Tutorials</a>, <a href=\"http://www.section508.gov/content/learn\">Section508.gov</a>, <a href=\"https://www.paciellogroup.com/blog/\">Paciello Group</a> and <a href=\"https://www.w3.org/TR/WCAG20/\">WCAG 2.0</a>, <a href=\"https://www.w3.org/WAI/\">Web Accessibility Initiative</a>.<br>Other:</br> <a href=\"http://www.standards-schmandards.com/\">Peter Krantz Blog</a>, <a href=\"http://4syllables.com.au/category/articles/accessibility/\">4syllables</a>, <a href=\"http://stackoverflow.com/questions/tagged/accessibility\">Stackoverflow</a> and <a href=\"https://www.reddit.com/r/accessibility/\">Reddit</a>."
					},
					{
						"p": "Open up the web for everyone!"
					},
					{
						"p": "}&#x3C;)))*&#x3E;"
					}
				]
			}
		]
	},
	"welcome": {
		"title": "0. Why should you care?",
		"screenReader": "Hello dear ScreenReader user, you are the best :)",
		"skip": "skip intro",
		"writings": [
			{
				"screenReader": "When you build a website or a webapp, you want it to be successfull. Right?",
				"texts": [
					"When you build a",
					"website,",
					"you want it to be",
					"successfull.",
					"Right?"
				],
				"button": "YES",
				"img": "assets/img/wobble_success.gif"
			},
			{
				"screenReader": "You want everyone to use it. Right?",
				"texts": [
					"You want",
					"everyone",
					"to use it. Right?"
				],
				"img": "assets/img/wobble_world.gif"
			},
			{
				"screenReader": "Then, why would you leave out eleven percent of the population?",
				"texts": [
					"Then, why would you leave out",
					"around 11%",
					"of the population?"
				],
				"img": "assets/img/wobble_heartbreak.gif"
			},
			{
				"screenReader": "Imagine increasing sales by eleven percent, while doing good. Neat right?",
				"texts": [
					"Imagine your sales",
					"increasing",
					"by 11% while doing",
					"good..."
				],
				"img": "assets/img/wobble_money.gif"
			},
			{
				"screenReader": "so...",
				"texts": [
					".......",
					"So..."
				]
			},
			{
				"screenReader": "Open up your websites for the physically impaired. Make them accessible!",
				"texts": [
					"Open up your website.",
					"Make it",
					"accessible for",
					"everyone!"
				],
				"img": "assets/img/wobble_luv.gif"
			},
			{
				"screenReader": "It is not difficult, nor will it cost a fortune. You have no excuse.",
				"texts": [
					"It’s not difficult & it will",
					"not cost",
					"a fortune. You have",
					"no excuse."
				],
				"img": "assets/img/wobble_excuse.gif"
			},
			{
				"screenReader": "Accessibility is like opening your door to everyone.",
				"texts": [
					"Accessibility is just like",
					"opening",
					"your door."
				],
				"img": "assets/img/wobble_door-0.gif",
				"last": "learn accessibility"
			}
		]
	}
}