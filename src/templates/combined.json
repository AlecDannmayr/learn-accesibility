{
	"audio": {
		"title": "Audio",
		"subtitle": "Accessibility",
		"letter": "A",
		"intro": {
			"p": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius incidunt, temporibus iure cupiditate hic modi voluptatem officia atque maiores, obcaecati eum aspernatur rem, consequuntur quos. In et, illum nisi voluptas facere cumque inventore, sed repellendus aliquid consectetur amet ex culpa vel ab! Magni nemo, eos quis accusantium labore mollitia placeat!",
			"img": {
				"src": "assets/img/dummy.png",
				"alt": "alt"
			}
		},
		"sections": [
			{
				"title": "Hiding Elements",
				"paragraphs": [
					{
						"li": "Most SR Obey <code class='language-css'>display:none</code> and <code class='language-css'>visibility:hidden</code> by not reading the text "
					},
					{
						"li": "The best way to hide text for users with vision but still let it be read out by screen readers is in css like this:",
						"pre": ".visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}",
						"preLang": "css"
					}
				],
				"subs": [
					{
						"title": "Section 1.1.",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					},
					{
						"title": "New Sub",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					}
				]
			},
			{
				"title": "Section2",
				"paragraphs": [
					{
						"p": "dolor sit"
					},
					{
						"img": "only img"
					}
				],
				"subs": [
					{
						"title": "test2"
					}
				]
			}
		]
	},
	"cognitive": {
		"title": "Cognitive",
		"subtitle": "Accessibility",
		"letter": "C",
		"intro": {
			"p": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius incidunt, temporibus iure cupiditate hic modi voluptatem officia atque maiores, obcaecati eum aspernatur rem, consequuntur quos. In et, illum nisi voluptas facere cumque inventore, sed repellendus aliquid consectetur amet ex culpa vel ab! Magni nemo, eos quis accusantium labore mollitia placeat!",
			"img": {
				"src": "assets/img/dummy.png",
				"alt": "alt"
			}
		},
		"sections": [
			{
				"title": "Hiding Elements",
				"paragraphs": [
					{
						"li": "Most SR Obey <code class='language-css'>display:none</code> and <code class='language-css'>visibility:hidden</code> by not reading the text "
					},
					{
						"li": "The best way to hide text for users with vision but still let it be read out by screen readers is in css like this:",
						"pre": ".visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}",
						"preLang": "css"
					}
				],
				"subs": [
					{
						"title": "Section 1.1.",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					},
					{
						"title": "New Sub",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					}
				]
			},
			{
				"title": "Section2",
				"paragraphs": [
					{
						"p": "dolor sit"
					},
					{
						"img": "only img"
					}
				],
				"subs": [
					{
						"title": "test2"
					}
				]
			}
		]
	},
	"home": {
		"letters": [
			"A",
			"c",
			"c",
			"e",
			"s",
			"s",
			"i",
			"b",
			"i",
			"l",
			"i",
			"t",
			"y",
			"i",
			"s"
		],
		"title": "Accessibility",
		"subtitle": "for everyone",
		"nav": {
			"mainmenu": "Main menu",
			"options": [
				{
					"url": "visual.html",
					"title": "V",
					"description": "visual",
					"sr": "accessibility"
				},
				{
					"url": "audio.html",
					"title": "A",
					"description": "audio",
					"sr": "accessibility"
				},
				{
					"url": "physical.html",
					"title": "P",
					"description": "physical",
					"sr": "accessibility"
				},
				{
					"url": "cognitive.html",
					"title": "C",
					"description": "Cognitive",
					"sr": "accessibility"
				}
			]
		}
	},
	"physical": {
		"title": "Physical",
		"subtitle": "Accessibility",
		"letter": "P",
		"intro": {
			"p": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eius incidunt, temporibus iure cupiditate hic modi voluptatem officia atque maiores, obcaecati eum aspernatur rem, consequuntur quos. In et, illum nisi voluptas facere cumque inventore, sed repellendus aliquid consectetur amet ex culpa vel ab! Magni nemo, eos quis accusantium labore mollitia placeat!",
			"img": {
				"src": "assets/img/dummy.png",
				"alt": "alt"
			}
		},
		"sections": [
			{
				"title": "Hiding Elements",
				"paragraphs": [
					{
						"li": "Most SR Obey <code class='language-css'>display:none</code> and <code class='language-css'>visibility:hidden</code> by not reading the text "
					},
					{
						"li": "The best way to hide text for users with vision but still let it be read out by screen readers is in css like this:",
						"pre": ".visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}",
						"preLang": "css"
					}
				],
				"subs": [
					{
						"title": "Section 1.1.",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					},
					{
						"title": "New Sub",
						"paragraphs": [
							{
								"li": "hahaha"
							}
						]
					}
				]
			},
			{
				"title": "Section2",
				"paragraphs": [
					{
						"p": "dolor sit"
					},
					{
						"img": "only img"
					}
				],
				"subs": [
					{
						"title": "test2"
					}
				]
			}
		]
	},
	"shared": {
		"toc": {
			"title": "Table of contents for",
			"V": 1,
			"A": 2,
			"P": 3,
			"C": 4
		},
		"nav": {
			"title": "Main menu",
			"selected": "current:",
			"options": [
				{
					"url": "visual.html",
					"title": "V",
					"description": "visual",
					"sr": "accessibility"
				},
				{
					"url": "audio.html",
					"title": "A",
					"description": "audio",
					"sr": "accessibility"
				},
				{
					"url": "physical.html",
					"title": "P",
					"description": "physical",
					"sr": "accessibility"
				},
				{
					"url": "cognitive.html",
					"title": "C",
					"description": "Cognitive",
					"sr": "accessibility"
				}
			]
		},
		"skipLinks": {
			"toContent": "Content",
			"toToc": "Table of Content",
			"toNav": "Navigation"
		},
		"sections": {
			"output": "Visual output",
			"audio": "Screen reader",
			"example": "Code example",
			"skip": "skip code example to next item",
			"warning": "> Note: ⇥ means that next element is only read when user press 'next item' button on his screen reader.<br> > Note: audio output when pressing on listen is not always accurate. But the text above these notes is."
		}
	},
	"visual": {
		"title": "Visual",
		"subtitle": "Accessibility",
		"letter": "V",
		"intro": {
			"p": "Speaking of web-accessibility, the visually impaired have the most painpoints. <a href=\"http://www.euroblind.org/resources/information/\">According to the EBU</a> more than 4% of the european population is blind or partially sighted. They use screen reader. A screen reader is a tool that reads content aloud. There are different types of screen readers, the most popular Screen Readers are JAWS and Zoom Text:",
			"img": {
				"src": "assets/img/sr-stats.png",
				"alt": "Chart of primary screen reader usage showing decreases in JAWS, NVDA, VoiceOver, SA and significant increases in ZoomText and Window-Eyes.",
				"caption": "Chart based on Data from <a href=\"http://webaim.org/projects/screenreadersurvey6/#primary\">webaim.org</a> a textual description can be found there."
			},
			"ul": [
				"All concepts introduced on this page were tested with VoiceOver and JAWS in June 2016.",
				"In all outputs under the examples, the headings where replaced by strong tags in order to not confuse screen reader users browsing this page."
			]
		},
		"sections": [
			{
				"title": "Basic Facts",
				"paragraphs": [
					{
						"li": "Screen reader can read text, and interpret special attributes written in HTML, most modern screen reader can also list common items as all headers, links, forms and tables."
					},
					{
						"li": "The usual painpoints are a bad page strukture, images, svg, graphs, videos, forms, tables, repetitive elements, visual features, popups."
					},
					{
						"li": "Screen readers have <a href=\"http://webaim.org/projects/screenreadersurvey4/#javascript\">no problems using javascript</a>."
					}
				]
			},
			{
				"title": "Hiding Elements",
				"paragraphs": [
					{
						"li": "Almost all screen reader obey <code class='language-css'>display:none</code> and <code class='language-css'>visibility:hidden</code> by ignoring the element."
					},
					{
						"li": "To have elements visually hidden but still accessible for screen readers the <a href=\"https://www.w3.org/WAI/tutorials/forms/labels/#note-on-hiding-elements\">W3C suggests</a> this css method:",
						"pre": ".visuallyhidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}",
						"preLang": "css"
					},
					{
						"li": "Of course you can also do the contrary. Hide text for screen readers but show it visually by using <code class='language-markup'>aria-hidden=\"true\"</code>. The support for aria-hidden is <a href=\"http://www.html5accessibility.com/tests/hidden2013.html\">brilliant</a>."
					},
					{
						"li": "This is how a screenreader would typically interpret the different hiding methods:",
						"example": {
							"pre": "I love\n <span style=\"display:none;\">bees</span>\n <span class=\"visuallyhidden\">cats</span>\n <span hidden>and</span>\n <span aria-hidden=\"true\">you</span>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "I love cats"
						}
					}
				]
			},
			{
				"title": "Structure",
				"paragraphs": [
					{
						"li": "The typical behaviour of screen reader is to read the page from top to bottom. So it is critical that all your element positioning follows the HTML flow. As all modern screen reader use and understand CSS and JavaScript it is important not to mess with that logical flow."
					},
					{
						"li": "The document outline should be respected. Read more on this in the <a href=\"#headings\">Headings section</a>. A tool to check your document outline is the <a href=\"https://gsnedders.html5.org/outliner/\">html5 outliner</a>."
					},
					{
						"li": "Use the <code>header</code> tag with <code>role=\"banner\"</code> for the heading of your website (often containing the logo and a searchbar). I.e. like this:",
						"example": {
							"pre": "<header role=\"banner\">\n  <img alt=\"Google\" style=\"height:70px\">\n  <div role=\"search\">\n    <input type=\"search\" aria-label=\"Search\">\n    <button type=\"submit\">Search</button>\n  </div>\n</header>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Banner, 2 items. -- Google image. -- Search, 2 items. -- search input. -- search button."
						}
					},
					{
						"li": "Any navigation should be contained in a <code>nav</code> tag with <code>role=\"navigation\"</code>. This way some screen reader will be able to list all the navigation elements on your page. Learn more on navigations in the <a href=\"#Navigation\">Navigation section</a>."
					},
					{
						"li": "The main content should be in a <code>main</code> tag with <code>role=\"main\"</code>. A page should always have main section. Some screen reader allow users to jump directly into the main section of a page and thus skipping the navigation or headings."
					},
					{
						"li": "The global footer should be in a <code>footer</code> tag with the <code>role=\"contentinfo\"</code> to differentiate it from other footers on the page."
					},
					{
						"li": "Any supplementary element (that do not fit in the main tag) belong in an <code>aside</code> tag with <code>role=\"complementary\"</code>."
					},
					{
						"li": "The searchbar (with its input, label, button, etc.) should be in a container (can be a form element) with <code>role=\"search\"</code>. Some screen reader allow users to jump directly to the search bar."
					},
					{
						"li": "To group content of a page you can divide it in sections with the <code>section</code> tag and the generic <code>role=\"region\"</code>. However, don’t overuse it as it adds text for the screen reader to read. On this page the different sections were groupes using this method, but not their subsections. Like this:",
						"example": {
							"pre": "<section role=\"region\" aria-labelledby=\"SomeTitle\">\n  <h2 id=\"SomeTitle\">\n    Structure\n  </h2>\n\n  [...]\n\n  <div>\n    <h3 id=\"SomeSubtitle\">\n      Subtitle of Structure\n    </h3>\n\n    [...]\n\n  </div>\n</section>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Region 'Structure', 4 items. -- Heading Level 2, Structure. -- content. -- Heading Level 3, Subtitle of Structure. -- content."
						}
					},
					{
						"li": "When structuring your element, the best practice is to use the <code>aria-labelledby</code> attribute and give it the <code>id</code> of the elements heading since all modern screen readers can list headings but not sections. If there is no descriptive heading, at least the <code>aria-label</code> attribute should be used. Let’s demonstrate the different behaviours:",
						"example": {
							"pre": "<section role=\"region\" aria-label=\"about\">\n  <h2 id=\"about\">About Sharks</h2>\n  [...]\n</section>\nOR\n<section role=\"region\" aria-label=\"Shark Fakts\">\n  [...]\n</section>\nOR\n<section role=\"region\">\n  [...]\n</section>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Region 'About Sharks' 2 items. -- Heading Level 2, About Sharks. -- content. | OR. -- Region 'Shark Fakts' 1 item. -- content. | OR. -- Region 1 item. -- content."
						}
					},
					{
						"li": "Use the right tags for the job:",
						"table": {
							"caption": "which tag is for what?",
							"heads": [
								"tag",
								"job",
								"learn more"
							],
							"rows": [
								[
									"ol",
									"ordered list",
									"<a href=\"https://developer.mozilla.org/en/docs/Web/HTML/Element/ol\">MDN</a>"
								],
								[
									"ul",
									"unordered list",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\">MDN</a>"
								],
								[
									"dl",
									"definition list",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\">MDN</a>"
								],
								[
									"table",
									"tabular data",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\">MDN</a>"
								],
								[
									"blockquote",
									"quotes",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\">MDN</a>"
								],
								[
									"q",
									"inline quotes",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\">MDN</a>"
								],
								[
									"img",
									"images",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\">MDN</a>"
								],
								[
									"em",
									"emphasis (italic text)",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em\">MDN</a>"
								],
								[
									"strong",
									"bold/highlighted text",
									"<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\">MDN</a>"
								],
								[
									{
										"manyMoreTitle": "Few more",
										"manyMoreSpan": "3",
										"manyMore": [
											"abbr",
											"address",
											"audio",
											"base",
											"button",
											"colgroup",
											"datalist",
											"del",
											"details",
											"figure",
											"i",
											"kbd",
											"map",
											"mark",
											"meter",
											"noscript",
											"output",
											"progress",
											"s",
											"sub",
											"sup",
											"track",
											"video"
										]
									}
								]
							]
						}
					}
				]
			},
			{
				"title": "Headings",
				"paragraphs": [
					{
						"li": "Beside giving a visual clue, screen reader can list all headings. A screen reader user will typically scan a pages headings and then jump imediately to that section. Therefor the logical flow of headings is more than important. Nest headings accordingly: h1 > h2 > h3 > ... without skipping a level."
					},
					{
						"li": "therefore it is also important to give all your page sections a specific heading with <code>aria-labelledby</code> <a href=\"#Structure-10\">as seen before under Structure</a>."
					},
					{
						"li": "Wen browsing over a heading, its level is read aloud:",
						"example": {
							"pre": "<h6>Example Heading</h6>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Heading Level 6, Example Heading."
						}
					},
					{
						"li": "The <code>role=\"heading\"</code> is not necessary if you use h tags. It might be used to declare another element than an h tag as a heading with <code>role=\"heading\" aria-level=\"7\"</code>. I.e. to get deeper than h6"
					}
				],
				"subs": [
					{
						"title": "Good headings",
						"paragraphs": [
							{
								"li": "Write the key information at the beginning.",
								"pre": "<!-- DO: -->\n<li>Great White Shark Facts</li>\n<li>Hammerhead Shark Facts</li>\n<!-- DONT: -->\n<li>Facts about great white sharks</li>\n<li>Facts about Hammerhead sharks</li>",
								"preLang": "markup"
							},
							{
								"li": "Usually the first heading is the page name or the overall heading, the second headings indicate the different sections"
							},
							{
								"li": "Also have a look at the guidelines regarding <a href=\"headings\">headings for people with cognitive disabilities</a>."
							}
						]
					}
				]
			},
			{
				"title": "Navigation/Menus",
				"paragraphs": [
					{
						"li": "Use list of links to help screen readers announce the number of links a menu has. Generally use unordered lists <code>ul</code> but when the order matters as in table of contents use ordered lists <code>ol</code>."
					},
					{
						"li": "Indicate the current page by adding 'Current Page:' in front of the respective element in the menu. Additionally, to make sure that the current page is obvious, the current page should not be linked. See the <a href=\"#Menus-3\">example below</a>."
					},
					{
						"li": "Wrap the menu in a <code>nav</code> tag with <code>role=\"navigation\"</code> and a heading to label the menu. That heading can be visually hidden. This is an accessible menu that enables users to find it when listing all the headings or menus:",
						"example": {
							"pre": "<nav role=\"navigation\" aria-label=\"mainmenu\">\n  <h2 id=\"mainmenu\" class=\"visuallyhidden\">Main Menu</h2>\n  <ul>\n    <li><span class=\"visuallyhidden\">Current: </span>Home</li>\n    <li><a href=\"#link\">About</a></li>\n    <li><a href=\"#link\">Contact</a></li>\n  </ul>\n</nav>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Navigation 'Main Menu', 2 items. -- Heading Level 2, Main Menu. -- Current. -- Home. -- Link, about. -- Link, contact."
						}
					}
				],
				"subs": [
					{
						"title": "Drop Downs",
						"paragraphs": [
							{
								"li": "Drop downs should be only visually hidden to be accessible for screen reader. Ideally the visuallyhidden class would then be toggled via javascript. See <a href=\"#Hiding-Elements\">hiding elements</a> and <a href=\"#Drop-Downs-2\">the example below</a> for further information."
							},
							{
								"li": "Usually a drop down is another odered or unordered list inside the list item of the first ordered or unordered list:",
								"pre": "<nav role=\"navigation\" aria-labelledby=\"exampleNav1\">\n  <h2 id=\"exampleNav1\">Some Example Navigation</h2>\n  <ul>\n    <li><a href=\"#link\">Section1</a></li>\n    <li><a href=\"#link\">Section2</a>\n      <!-- submenu start -->\n      <ul class=\"visuallyhidden\">\n        <li><a href=\"#link\">Section2-1</a></li>\n        <li><a href=\"#link\">Section2-2</a></li>\n      </ul>\n      <!-- submenu end -->\n    </li>\n    <li><a href=\"#link\">Section3</a></li>\n  </ul>\n</nav>",
								"preLang": "markup"
							}
						]
					},
					{
						"title": "Breadcrumbs",
						"paragraphs": [
							{
								"li": "Use a <code>nav</code> tag with <code>role=\"navigation\"</code> and <code>aria-label=\"you are here\"</code>. Also add a visually hidden indice “current” to the last item.",
								"example": {
									"pre": "<nav class=\"breadcrumb\" role=\"navigation\" aria-label=\"You are here:\">\n  <a href=\"#link\">Home</a>\n  >\n  <a href=\"#link\">About Sharks</a>\n  >\n  <span class=\"visuallyhidden\">Current:</span> Hammerhead Shark Facts.\n</nav>\n",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Navigation 'You are here', 6 items. -- Link, Home. -- > -- Link, About Sharks. -- > -- Current. -- Hammerhead Shark Facts."
								}
							}
						]
					},
					{
						"title": "Skip Links",
						"paragraphs": [
							{
								"li": "Not every screen reader has advanced mechanism to jump to sections, headings, links, etc. or to skip repetitive codeblocks as Tables, Codeblocks, etc. So, this is probably one of the most important thing for a good screen reader user experience is providing links to jump immediatly to relevant sections and/or to skip repetitive content. On this page skip links were added before each code example to skip it. Moreover a visually hidden skip link was added at the begining of the page granting screen reader users the possibility to jump directly to either the table of contents, the menu or the content. PS: There is also a visually hidden easter egg somewhere, can you spot it?"
							},
							{
								"li": "Skip links are like normal links pointing to anchors (elements with IDs) on your page. You might want to hide them visually but display them on focus to improve the usability of your page for keyboard users as well:",
								"pre": "// Script to unhide Skiplinks on focus\nvar skiplinks = document.querySelectorAll('a.visuallyhidden');\nfor (var i = 0; i < skiplinks.length; i++) {\n  var el = skiplinks[i];\n  el.addEventListener('focus', function() {\n    el.classList.remove('visuallyhidden');\n  });\n  el.addEventListener('blur', function() {\n    el.classList.add('visuallyhidden');\n  }); }",
								"preLang": "javascript",
								"example": {
									"pre": "<p>Item</p>\n<a href=\"#linkNext\" class=\"visuallyhidden\">Skip annoying content to next item</a>\n<p>Annoying Content</p>\n<p id=\"linkNext\">Next item</p>",
									"preLang": "markup",
									"play": "Listen ♫",
									"audio": "Item. -- Link, Skip annoying content to next item. -- Press link: Skip annoying content to next item -- Next item."
								}
							},
							{
								"li": "It is a good practice to have a table of content linking to each heading within a long text. A table of content is nothing other than a <a href=\"#Navigation-Menus\">navigation menu</a>."
							}
						]
					}
				]
			},
			{
				"title": "Tables",
				"paragraphs": [
					{
						"li": "Any tabular data should be written in Tables as some screen reader have special features to recognise tables."
					},
					{
						"li": "Add a caption to your table explaining what it is about. Hide it visually if it is obvious for visual users."
					},
					{
						"li": "To make sure that the screen readers read your tables correctly include scoping. Use <code>scope=\"col\"</code> to identify the columns and <code>scope=\"row\"</code> to identify rows and <code>scope=\"colgroup\"</code> whenever a column spans over more than one item. This is how a complex accessible table could look like:",
						"example": {
							"pre": "<table class=\"exampletable\">\n  <caption>Edible elements:</caption>\n  <tr>\n    <td scope=\"col\"></td>\n    <th scope=\"col\">Edible</th>\n    <th colspan=\"2\" scope=\"colgroup\">Not Edible</th>\n    <th scope=\"col\">Maybe Edible</th>\n  </tr>\n  <tr>\n    <th>Apple</th>\n    <td scope=\"row\">Fruit</td>\n    <td>Computer</td>\n    <td>Corporation</td>\n    <td>Special</td>\n  </tr>\n</table>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Edible elements, table 5 columns, 2 rows. -- Edible, column 2. -- Spans 2 columns, Not edible, column 3. -- Maybe edible, colum 5. -- Row 2, Apple. -- Edible, Fruit, column 2. -- Not edible, Computer, column 3 -- Corporation. -- Maybe edible, Special, column 5."
						}
					},
					{
						"li": "Do not use tables for layout purpose, that is not what they are intendet for. It would probably mess up the screen reader."
					},
					{
						"li": "Keep it simple. If you have complex data, use several Tables to represent it instead of one. [V][A][P][C]"
					},
					{
						"li": "Give table data a different look to table headings. [A][P][C]"
					},
					{
						"li": "Zebra tables (where every second row has a light background) are good practice for long tables so that the user don’t get lost [A][P][C]"
					}
				]
			},
			{
				"title": "SVG",
				"paragraphs": [
					{
						"li": "You can use your SVGs within an <code>img</code> tag, then the <a href=\"#images\">same rules as for images</a> apply."
					},
					{
						"li": "If you inline your SVG and they are a collection of elements that form an image. Then add <code>role=\"img\"</code> to your container. Then, add a <code>role=\"presentation\"</code> to the svg elements to hide them from the screen reader, as seen in the <a href=\"#SVG-3\">example below</a>."
					},
					{
						"li": "If they are not <a href=\"#Purely-Decorative-Element\">purely decorative elements</a> usually a <code>title</code> with the respective <code>aria-labeledby=\"titleID\"</code> will be sufficient. However, if you have a complex image that you want to fully describe, provide da <code>desc</code> tag and link it in the same <code>aria-labeledby=\"titleID descID\"</code>. Here is an example borrowed from the <a href=\"https://www.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/\">paciellogroup</a>:",
						"example": {
							"pre": "<svg xmlns=http://www.w3.org/2000/svg role=\"img\" aria-labelledby=\"title  desc\">\n   <title id=\"title\">Circle</title>\n   <desc id=\"desc\">Large circle with a fat border</desc>\n   <circle role=\"presentation\" cy=\"60\" cx=\"60\" r=\"35\" stroke=\"black\" stroke-width=\"2\" \n   fill=\"grey\" />\n</svg>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Circle large circle with a fat border, image."
						}
					},
					{
						"li": "You can use text and links within svg. For modern screen reader, the <code>text</code> tag is accessible by default but you should add a <code>role=\"link\"</code> to your links",
						"example": {
							"pre": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"30\" viewBox=\"0 0 300 300\">\n  <a xlink:href=\"#link\">\n    <text x=\"-300\" y=\"150\" font-family=\"Verdana\" font-size=\"125\">\n      Hello out there\n    </text>\n  </a>\n</svg>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Link, Hello out there"
						}
					},
					{
						"li": "If your SVG contains content that is interactive, you’ll need to make sure that the interactive elements are targetable. That might be done with the <code>role=\"link\"</code>."
					},
					{
						"li": "To know if your SVG is purely decorative and what to do, have a look at the <a href=\"#Purely-Decorative-Element\">purely decorative elements</a> section."
					},
					{
						"li": "To learn when to add a title and description see <a href=\"#alternative-description\">Alternative Description</a> section."
					}
				]
			},
			{
				"title": "Images",
				"paragraphs": [
					{
						"li": "If your image provides information and is not <a href=\"#Purely-Decorative-Element\">purely decorative</a> provide it with a <a href=\"#alternative-description\">good alternative description</a>.",
						"example": {
							"pre": "<img src=\"img.jpg\" alt=\"Dog with a bell attached to its collar\" style=\"height: 50px;\">",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Dog with a bell attached to its collar, Image"
						}
					},
					{
						"li": "To provide textual information to any reader, you can add a <code>caption</code> to your image. Give it the <code>role=\"group\"</code> to semantically group the caption and image",
						"example": {
							"pre": "<figure role=\"group\">\n  <img src=\"img.jpg\" alt=\"Dog with a bell attached to its collar\" style=\"height: 50px;\">\n  <figcaption>The bell worn by off-duty guide dogs helps the blind owner keep track of the dog’s location.</figcaption>\n</figure>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Group 2 items. -- Dog with a bell attached to its collar, Image. -- The bell worn by off-duty guide dogs helps the blind owner keep track of the dog’s location. -- End of group."
						}
					},
					{
						"li": "In some cases the image is <a href=\"#Purely-Decorative-Element\">purely decorative</a>. If so, you should still provide an alt attribute but leave it empty. Otherwise some sceen reader will read the image filename instead. To be sure that it does not get read add a <code>role=\"presentation\"</code> and/or <code>aria-hidden=\"true\"</code>.",
						"pre": "<img src=\"img.jpg\" alt=\"\" aria-hidden=\"true\">",
						"preLang": "markup"
					},
					{
						"li": "If you use image maps, add alt attributes and make sure not to use any id or name twice on the same document.",
						"example": {
							"pre": "<img src=\"img.jpg\" alt=\"Chairmen of XY Corp\" usemap=\"#Map\" style=\"height:50px;\">\n<map id=\"Map\" name=\"Map\">\n    <area alt=\"Davy Jones\" shape=\"rect\" coords=\"176,14,323,58\" href=\"#link\" style=\"background-color: red;\">\n    <area alt=\"Harry Brown\" shape=\"rect\" coords=\"6,138,155,182\" href=\"#link\" style=\"background-color: red;\">\n</map>",
							"preLang": "markup",
							"play": "Listen ♫",
							"audio": "Chairmen of XY Corp, image map -.. | Interact with Chairmen of XY Corp, image map, two items, link Davy Jones. -- Link, Harry Brown"
						}
					}
				]
			},
			{
				"title": "alternative description",
				"paragraphs": [
					{
						"li": "Here you will learn common cases when and how to label based on images but same comes true for any other visual element. The <a href=\"#good-alternatives\">good alternatives</a> sub-section gives you more general information on how to label. Also, have a look at the <a href=\"#Purely-Decorative-Element\">purely decorative elements</a> sub-section to know when not to label."
					},
					{
						"li": "Any element with text should be accessible. So, if there is text in your image add an <code>alt=\"Text\"</code> attribute containing that text. However, nowadays it is possible to style text with css. Textual be should be real text. For Mathematical Formulas see <a href=\"https://www.w3.org/Math/\">MathML</a>."
					},
					{
						"li": "When the elemnt labels other information, add an alt attribute with the respective information.",
						"pre": "<img src=\"phone.png\" alt=\"Phone:\"> 0123 456 7890",
						"preLang": "markup"
					},
					{
						"li": "When your element supplements other information, add an alternative",
						"pre": "<img src=\"fire-extinguisher-car.jpg\" alt=\"Fire extinguisher in a cars’ trunk.\">\nDon’t forget to equip you car with a fire extinguisher",
						"preLang": "markup"
					},
					{
						"li": "Instructions should be accessible.",
						"pre": "<img src=\"instruction.jpg\" alt=\"Turn the biggest knob ontop of your ghetto blaster to the right to increase volume and to the left to decrease volume\">",
						"preLang": "markup"
					},
					{
						"li": "If your elements convey clear impressions or emotions it makes sense to provide them to everyone.",
						"pre": "<img src=\"children-play-area.jpg\" alt=\"we’re family friendly\">",
						"preLang": "markup"
					},
					{
						"li": "Showing the format of a file",
						"pre": "<a href=\"#link\">\n  <img src=\"pdf.png\" alt=\"PDF:\">\n  Download ticket\n</a>",
						"preLang": "markup"
					},
					{
						"li": "Do not describe your logos in detail (no matter how cool it is), the brands name and maybe claim is sufficient."
					},
					{
						"li": "Conveying information within link text:",
						"pre": "<a href=\"#link\" target=\"_blank\">\n  Google <img src=\"new-window.png\" alt=\"open in new window\">\n</a>\n<!-- svg -->\n<a href=\"#link\" target=\"_blank\">\n  Google\n  <svg xmlns=http://www.w3.org/2000/svg role=\"img\" aria-labelledby=\"title\">\n    <title id=\"title\">open in new window</title>\n    <circle role=\"presentation\" cy=\"60\" cx=\"60\" r=\"35\" stroke=\"black\" stroke-width=\"2\" fill=\"grey\" />\n  </svg>\n</a>",
						"preLang": "markup"
					},
					{
						"li": "Have accessible functional elements.",
						"pre": "<a href=\"javascript:print()\">\n  <img src=\"print.png\" alt=\"Print this page\">\n</a>\n<!-- instead of alt=\"Printer\" -->",
						"preLang": "markup"
					},
					{
						"li": "For complex images you’ll need a two-part alternative. The first part is a brief description to identify the image, the second part is a long description near the visual element as text or on as an external link pointing to a text. Use the <code>longdesc=\"#longdesc\"</code> attribute to link to the long description and <code>aria-describedby=\"longdesc\"</code> if the long description is not directly adjacent. Using the longdesc alone is not a good idea since it lacks of support and it leaves out visual users. See the <a href=\"#SVG-3\">SVG example<a> for SVGs.",
						"pre": "<figure role=\"group\">\n  <img src=\"chart.png\" alt=\"Pie chart showing ethnic groups in london\">\n  <figcaption>\n    <a href=\"#link\">Ethnic groups (text description of the pie chart)</a>\n  </figcaption>\n</figure>\n<!-- or -->\n<figure role=\"group\">\n  <img src=\"chart.png\" alt=\"Pie chart showing ethnic groups in london, described in detail below.\"\n    longdesc=\"#chart-longdesc\">\n  <figcaption id=\"chart-longdesc\">\n    <h2>Values</h2>\n    <table>\n      [...]\n    </table>\n  </figcaption>\n</figure>",
						"preLang": "markup"
					},
					{
						"li": "When multiple images convey one information you only have to add a description to the first one.",
						"pre": "<img src=\"star-full.jpg\"  alt=\"1.5 out of 3 stars\">\n<img src=\"star-half.jpg\"  alt=\"\">\n<img src=\"star-empty.jpg\"  alt=\"\">",
						"preLang": "markup"
					}
				],
				"subs": [
					{
						"title": "Write good alternatives",
						"paragraphs": [
							{
								"li": "don’t describe your elements if they are <a href=\"#Purely-Decorative-Element\">purely decorative</a>."
							},
							{
								"li": "Aim to put the most important information at the beginning of your sentence.",
								"pre": "Green Apples\nRed Apples\nYellow Apples\n<!-- Instead of -->\nApples - Green\nApples - Red\nApples - Yellow",
								"preLang": "markup"
							},
							{
								"li": "Add a <a href=\"#alternative-description-11\">long description</a> if anything more than a short phrase is needed to describe the element."
							},
							{
								"li": "Use normal punctuation in your alternative just like normal text."
							},
							{
								"li": "Avoid Abbreviations."
							},
							{
								"li": "The text has to give the same information as the image. That is, if someone cannot see the image, they get the important information from the image. If you were helping someone read and interact with the web page and they cannot see it, how would you describe the image?"
							},
							{
								"li": "Keywords as “image”, “button”, “icon”, or “picture” in the alternative are redundant."
							},
							{
								"li": "Examples for extensive descriptions (borrowed from <a href=\"http://4syllables.com.au/articles/decorative-images/\">4syllabes</a>):",
								"pre": "“Two staff members wearing safety gear, shown working outdoors collecting information on a laptop and mobile phone”, \n“Eucalypt leaf, Tidbinbilla Nature Reserve, Australian Capital Territory”,\n“A researcher draws blood from a patient’s arm”,\n“3 young children, two boys and a girl, play with 2 golden labrador puppies, soon to be trained as seeing eye dogs”",
								"preLang": "markup"
							},
							{
								"li": "Typically the alternative is not a literal description of the image but conveys the meaning of the image. Here are some examples <a href=\"https://www.w3.org/TR/WCAG20-TECHS/G94\">from w3</a> to illustrate that fact:",
								"pre": "> A chart showing sales for October has an short text alternative of \"October sales chart\". It also has a long description that provides all of the information on the chart.\n> A search button uses an image of a magnifying glass. The text alternative is \"search\" and not \"magnifying glass\".\n> A picture shows how a knot is tied including arrows showing how the ropes go to make the knot. The text alternative describes how to tie the knot, not what the picture looks like.\n> A picture shows what a toy looks like from the front. The text alternative describes a front view of the toy.\n> An animation shows how to change a tire. A short text alternative describes what the animation is about. A long text alternative describes how to change a tire.\n> The text alternative should be “print this page” rather than “(image of a) printer”, “search” rather than “magnifying lens” or “Example.com home page” rather than “Example.com logo”.",
								"preLang": "markup"
							},
							{
								"li": "DO NOT use short descriptions as:",
								"pre": "“banner”, “news item graphic”, “smiling people”,\n“plant”, “open day photo”, “decorative element”,\n“funny bread”, “needle”, “kids with toys”,\n etc.",
								"preLang": "markup"
							}
						]
					},
					{
						"title": "Purely Decorative Elements"
					}
				]
			},
			{
				"title": "Example Section",
				"paragraphs": [
					{
						"p": "dolor sit"
					},
					{
						"img": "only img"
					}
				],
				"subs": [
					{
						"title": "test2"
					}
				]
			}
		]
	},
	"welcome": {
		"title": "0. Why should you care?",
		"screenReader": "Hello dear ScreenReader user, you are the best :)",
		"skip": "skip intro",
		"writings": [
			{
				"screenReader": "When you build a website or a webapp, you want it to be successfull. Right?",
				"texts": [
					"When you build a",
					"website,",
					"you want it to be",
					"successfull.",
					"Right?"
				],
				"button": "YES",
				"img": "assets/img/wobble_success.gif"
			},
			{
				"screenReader": "You want everyone to use it. Right?",
				"texts": [
					"You want",
					"everyone",
					"to use it. Right?"
				],
				"img": "assets/img/wobble_world.gif"
			},
			{
				"screenReader": "Then, why would you leave out eleven percent of the population?",
				"texts": [
					"Then, why would you leave out",
					"around 11%",
					"of the population?"
				],
				"img": "assets/img/wobble_heartbreak.gif"
			},
			{
				"screenReader": "Imagine increasing sales by eleven percent, while doing good. Neat right?",
				"texts": [
					"Imagine your sales",
					"increasing",
					"by 11% while doing",
					"good..."
				],
				"img": "assets/img/wobble_money.gif"
			},
			{
				"screenReader": "so...",
				"texts": [
					".......",
					"So..."
				]
			},
			{
				"screenReader": "Open up your websites for the physically impaired. Make them accessible!",
				"texts": [
					"Open up your website.",
					"Make it",
					"accessible for",
					"everyone!"
				],
				"img": "assets/img/wobble_luv.gif"
			},
			{
				"screenReader": "It is not difficult, nor will it cost a fortune. You have no excuse.",
				"texts": [
					"It’s not difficult & it will",
					"not cost",
					"a fortune. You have",
					"no excuse."
				],
				"img": "assets/img/wobble_excuse.gif"
			},
			{
				"screenReader": "Accessibility is like opening your door to everyone.",
				"texts": [
					"Accessibility is just like",
					"opening",
					"your door."
				],
				"img": "assets/img/wobble_door-0.gif",
				"last": "learn accessibility"
			}
		]
	}
}